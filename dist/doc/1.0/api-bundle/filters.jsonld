{"@context":"http://schema.org","@type":"CreativeWork","name":"Filters","text":"\u003ch1\u003eFilters\u003c/h1\u003e\n\n\u003cp\u003eThe bundle provides a generic system to apply filters on collections. Useful filters\nfor the Doctrine ORM are provided with the bundle. However the filter system is\nextensible enough to let you create custom filters that would fit your specific needs\nand for any data provider.\u003c/p\u003e\n\n\u003cp\u003eBy default, all filters are disabled. They must be enabled explicitly.\u003c/p\u003e\n\n\u003cp\u003eWhen a filter is enabled, it is automatically documented as a \u003ccode\u003ehydra:search\u003c/code\u003e property\nin collection returns. It also automatically appears in the NelmioApiDoc documentation\nif this bundle is active.\u003c/p\u003e\n\n\u003ch2\u003eSearch filter\u003c/h2\u003e\n\n\u003cp\u003eIf Doctrine ORM support is enabled, adding filters is as easy as adding an entry\nin your \u003ccode\u003eapp/config/services.yml\u003c/code\u003e file.\u003c/p\u003e\n\n\u003cp\u003eThe search filter supports \u003ccode\u003eexact\u003c/code\u003e, \u003ccode\u003epartial\u003c/code\u003e, \u003ccode\u003estart\u003c/code\u003e, \u003ccode\u003eend\u003c/code\u003e, and \u003ccode\u003eword_start\u003c/code\u003e matching strategies.\n- \u003ccode\u003epartial\u003c/code\u003e strategy uses \u003ccode\u003eLIKE %text%\u003c/code\u003e to search for fields that containing the text.\n- \u003ccode\u003estart\u003c/code\u003e strategy uses \u003ccode\u003eLIKE text%\u003c/code\u003e to search for fields that starts with text.\n- \u003ccode\u003eend\u003c/code\u003e strategy uses \u003ccode\u003eLIKE %text\u003c/code\u003e to search for fields that ends with text.\n- \u003ccode\u003eword_start\u003c/code\u003e strategy uses \u003ccode\u003eLIKE text% OR LIKE % text%\u003c/code\u003e to search for fields that contains the word starting with \u003ccode\u003etext\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003ePrepend the letter \u003ccode\u003ei\u003c/code\u003e to the filter if you want it to be case insensitive. For example \u003ccode\u003eipartial\u003c/code\u003e or \u003ccode\u003eiexact\u003c/code\u003e. Note that this will use the \u003ccode\u003eLOWER\u003c/code\u003e function and \u003cstrong\u003ewill\u003c/strong\u003e impact performances if there is no \u003ca href=\"http://use-the-index-luke.com/sql/where-clause/functions/case-insensitive-search\"\u003e\u003cem\u003efunction-based index\u003c/em\u003e\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn the following example, we will see how to allow the filtering of a list of e-commerce offers:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e\n# app/config/services.yml\n\nservices:\n    resource.offer.search_filter:\n        parent:    \u0026#34;api.doctrine.orm.search_filter\u0026#34;\n        arguments: [ { id: \u0026#34;exact\u0026#34;, price: \u0026#34;exact\u0026#34;, name: \u0026#34;word_start\u0026#34;, alias: \u0026#34;start\u0026#34;, description: \u0026#34;partial\u0026#34;  } ]\n\n    resource.offer:\n        parent:    \u0026#34;api.resource\u0026#34;\n        arguments: [ \u0026#34;AppBundle\\\\Entity\\\\Offer\u0026#34; ]\n        calls:\n            -      method:    \u0026#34;initFilters\u0026#34;\n                   arguments: [ [ \u0026#34;@resource.offer.search_filter\u0026#34; ] ]\n        tags:      [ { name: \u0026#34;api.resource\u0026#34; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003ccode\u003ehttp://localhost:8000/api/offers?price=10\u003c/code\u003e will return all offers with a price being exactly \u003ccode\u003e10\u003c/code\u003e.\n\u003ccode\u003ehttp://localhost:8000/api/offers?name=shirt\u003c/code\u003e will returns all offers with a name containing the word starts with “shirt”.\n\u003ccode\u003ehttp://localhost:8000/api/offers?alias=tee\u003c/code\u003e will returns all offers with an alias starts with “tee”.\n\u003ccode\u003ehttp://localhost:8000/api/offers?description=cotton\u003c/code\u003e will returns all offers with a description containing with “cotton”.\u003c/p\u003e\n\n\u003cp\u003eFilters can be combined together: \u003ccode\u003ehttp://localhost:8000/api/offers?price=10\u0026amp;name=shirt\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eIt is possible to filter on relations too:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e\n# app/config/services.yml\n\nservices:\n    resource.offer.search_filter:\n        parent:    \u0026#34;api.doctrine.orm.search_filter\u0026#34;\n        arguments: [ { \u0026#34;product\u0026#34;: \u0026#34;exact\u0026#34; } ]\n\n    resource.offer:\n        parent:    \u0026#34;api.resource\u0026#34;\n        arguments: [ \u0026#34;AppBundle\\\\Entity\\\\Offer\u0026#34; ]\n        calls:\n            -      method:    \u0026#34;initFilters\u0026#34;\n                   arguments: [ [ \u0026#34;@resource.offer.search_filter\u0026#34; ] ]\n        tags:      [ { name: \u0026#34;api.resource\u0026#34; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWith this service definition, it is possible to find all offers belonging to the\nproduct identified by a given IRI.\nTry the following: \u003ccode\u003ehttp://localhost:8000/api/offers?product=/api/products/12\u003c/code\u003e\nUsing a numeric ID is also supported: \u003ccode\u003ehttp://localhost:8000/api/offers?product=12\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003ePrevious URLs will return all offers for the product having the following IRI as\nJSON-LD identifier (\u003ccode\u003e@id\u003c/code\u003e): \u003ccode\u003ehttp://localhost:8000/api/products/12\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDate filter\u003c/h2\u003e\n\n\u003cp\u003eThe date filter allows to filter a collection by date intervals.\u003c/p\u003e\n\n\u003cp\u003eSyntax: \u003ccode\u003e?property[\u0026lt;after|before\u0026gt;]=value\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThe value can take any date format supported by the \u003ca href=\"http://php.net/manual/en/datetime.construct.php\"\u003e\u003ccode\u003e\\DateTime()\u003c/code\u003e\u003c/a\u003e\nclass.\u003c/p\u003e\n\n\u003cp\u003eAs others filters, the date filter must be explicitly enabled:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e\n# app/config/services.yml\n\nservices:\n    # Enable date filter for for the property \u0026#34;dateProperty\u0026#34; of the resource \u0026#34;resource.offer\u0026#34;\n    resource.date_filter:\n        parent:    \u0026#34;api.doctrine.orm.date_filter\u0026#34;\n        arguments: [ { \u0026#34;dateProperty\u0026#34;: ~ } ]\n\n    resource.offer:\n        parent:    \u0026#34;api.resource\u0026#34;\n        arguments: [ \u0026#34;AppBundle\\\\Entity\\\\Offer\u0026#34; ]\n        calls:\n            -      method:    \u0026#34;initFilters\u0026#34;\n                   arguments: [ [ \u0026#34;@resource.offer.date_filter\u0026#34; ] ]\n        tags:      [ { name: \u0026#34;api.resource\u0026#34; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch3\u003eManaging \u003ccode\u003enull\u003c/code\u003e values\u003c/h3\u003e\n\n\u003cp\u003eThe date filter is able to deal with date properties having \u003ccode\u003enull\u003c/code\u003e values.\nFour behaviors are available at the property level of the filter:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003cth\u003eStrategy to set\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eUse the default behavior of the DBMS\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003eExclude items\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eDunglas\\ApiBundle\\Doctrine\\Orm\\Filter\\DateFilter::EXCLUDE_NULL\u003c/code\u003e (\u003ccode\u003e0\u003c/code\u003e)\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003eConsider items as oldest\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eDunglas\\ApiBundle\\Doctrine\\Orm\\Filter\\DateFilter::INCLUDE_NULL_BEFORE\u003c/code\u003e (\u003ccode\u003e1\u003c/code\u003e)\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003eConsider items as youngest\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eDunglas\\ApiBundle\\Doctrine\\Orm\\Filter\\DateFilter::INCLUDE_NULL_AFTER\u003c/code\u003e (\u003ccode\u003e2\u003c/code\u003e)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eFor instance, exclude entries with a property value of \u003ccode\u003enull\u003c/code\u003e, with the following service definition:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e\n# app/config/services.yml\n\nservices:\n    resource.date_filter:\n        parent:    \u0026#34;api.doctrine.orm.date_filter\u0026#34;\n        arguments: [ { \u0026#34;dateProperty\u0026#34;: ~ } ]\n\n    resource.offer:\n        parent:    \u0026#34;api.resource\u0026#34;\n        arguments: [ \u0026#34;AppBundle\\\\Entity\\\\Offer\u0026#34; ]\n        calls:\n            -      method:    \u0026#34;initFilters\u0026#34;\n                   arguments: [ [ \u0026#34;@resource.offer.date_filter\u0026#34; ] ]\n        tags:      [ { name: \u0026#34;api.resource\u0026#34; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIf you use another service definition format than YAML, you can use the\n\u003ccode\u003eDunglas\\ApiBundle\\Doctrine\\Orm\\Filter\\DateFilter::EXCLUDE_NULL\u003c/code\u003e constant directly.\u003c/p\u003e\n\n\u003ch2\u003eOrder filter\u003c/h2\u003e\n\n\u003cp\u003eThe order filter allows to order a collection against the given properties.\u003c/p\u003e\n\n\u003cp\u003eSyntax: \u003ccode\u003e?order[property]=\u0026lt;asc|desc\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eEnable the filter:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e\n# app/config/services.yml\n\nservices:\n    resource.offer.order_filter:\n        parent:    \u0026#34;api.doctrine.orm.order_filter\u0026#34;\n        arguments: [ { \u0026#34;id\u0026#34;: ~, \u0026#34;name\u0026#34;: ~ } ]\n\n    resource.offer:\n        parent:    \u0026#34;api.resource\u0026#34;\n        arguments: [ \u0026#34;AppBundle\\\\Entity\\\\Offer\u0026#34; ]\n        calls:\n            -      method:    \u0026#34;initFilters\u0026#34;\n                   arguments: [ [ \u0026#34;@resource.offer.order_filter\u0026#34; ] ]\n        tags:      [ { name: \u0026#34;api.resource\u0026#34; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eGiven that the collection endpoint is \u003ccode\u003e/offers\u003c/code\u003e, you can filter offers by name in\nascending order and then by ID in descending order with the following query: \u003ccode\u003e/offers?order[name]=desc\u0026amp;order[id]=asc\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBy default, whenever the query does not specify the direction explicitly (e.g: \u003ccode\u003e/offers?order[name]\u0026amp;order[id]\u003c/code\u003e), filters will not be applied unless you configure a default order direction to use:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e\n# app/config/services.yml\n\nservices:\n    resource.offer.order_filter:\n        parent:    \u0026#34;api.doctrine.orm.order_filter\u0026#34;\n        arguments: [ { \u0026#34;id\u0026#34;: ASC, \u0026#34;name\u0026#34;: DESC } ]\n\n    [...]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch3\u003eUsing a custom order query parameter name\u003c/h3\u003e\n\n\u003cp\u003eA conflict will occur if \u003ccode\u003eorder\u003c/code\u003e is also the name of a property with the search filter enabled.\nLuckily, the query parameter name to use is configurable:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e\n# app/config/config.yml\n\ndunglas_api:\n    collection:\n        filter_name:\n            order:   \u0026#34;_order\u0026#34; # the URL query parameter to use is now \u0026#34;_order\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eFiltering on nested properties\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e(Added in v1.1 of the API Bundle)\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eSometimes, you need to be able to perform filtering based on some linked resources\n(on the other side of a relation). All built-in filters support nested properties\nusing the dot (\u003ccode\u003e.\u003c/code\u003e) syntax, e.g.:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e\n# app/config/services.yml\n\nservices:\n    resource.offer.search_filter:\n        parent:    \u0026#34;api.doctrine.orm.search_filter\u0026#34;\n        arguments: [ { \u0026#34;product.color\u0026#34;: \u0026#34;exact\u0026#34; } ]\n\n    resource.offer.order_filter:\n        parent:    \u0026#34;api.doctrine.orm.order_filter\u0026#34;\n        arguments: [ { \u0026#34;product.releaseDate\u0026#34;: ~ } ]\n\n    resource.offer:\n        parent:    \u0026#34;api.resource\u0026#34;\n        arguments: [ \u0026#34;AppBundle\\\\Entity\\\\Offer\u0026#34; ]\n        calls:\n            -      method:    \u0026#34;initFilters\u0026#34;\n                   arguments: [ [ \u0026#34;@resource.offer.search_filter\u0026#34;, \u0026#34;@resource.offer.order_filter\u0026#34; ] ]\n        tags:      [ { name: \u0026#34;api.resource\u0026#34; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe above allows you to find offers by their respective product’s color: \u003ccode\u003ehttp://localhost:8000/api/offers?product.color=red\u003c/code\u003e,\nor order offers by the product’s release date: \u003ccode\u003ehttp://localhost:8000/api/offers?order[product.releaseDate]=desc\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2\u003eEnabling a filter for all properties of a resource\u003c/h2\u003e\n\n\u003cp\u003eAs we have seen in previous examples, properties where filters can be applied must be\nexplicitly declared. But if you don’t care about security and performance (ex:\nan API with restricted access), it’s also possible to enable builtin filters for\nall properties:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e\n# app/config/services.yml\n\nservices:\n    # Filter enabled for all properties\n    resource.offer.order_filter:\n        parent:    \u0026#34;api.doctrine.orm.order_filter\u0026#34;\n        arguments: [ ~ ] # This line can also be omitted\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote: Filters on nested properties must still be enabled explicitly, in order to keep things sane\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eRegardless of this option, filters can by applied on a property only if:\n- the property exists\n- the value is supported (ex: \u003ccode\u003easc\u003c/code\u003e or \u003ccode\u003edesc\u003c/code\u003e for the order filters).\u003c/p\u003e\n\n\u003cp\u003eIt means that the filter will be \u003cstrong\u003esilently\u003c/strong\u003e ignored if the property:\n- does not exist\n- is not enabled\n- has an invalid value\u003c/p\u003e\n\n\u003ch2\u003eCreating custom filters\u003c/h2\u003e\n\n\u003cp\u003eCustom filters can be written by implementing the \u003ccode\u003eDunglas\\ApiBundle\\Api\\Filter\\FilterInterface\u003c/code\u003e\ninterface.\u003c/p\u003e\n\n\u003cp\u003eDon’t forget to register your custom filters with the \u003ccode\u003eDunglas\\ApiBundle\\Api\\Resource::initFilters()\u003c/code\u003e method.\u003c/p\u003e\n\n\u003cp\u003eIf you use \u003ca href=\"data-providers.jsonld\"\u003ecustom data providers\u003c/a\u003e, they must support filtering and be aware of active filters to\nwork properly.\u003c/p\u003e\n\n\u003ch3\u003eCreating custom Doctrine ORM filters\u003c/h3\u003e\n\n\u003cp\u003eDoctrine ORM filters must implement the \u003ccode\u003eDunglas\\ApiBundle\\Doctrine\\Orm\\Filter\\FilterInterface\u003c/code\u003e.\nThey can interact directly with the Doctrine \u003ccode\u003eQueryBuilder\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA convenient abstract class is also shipped with the bundle: \u003ccode\u003eDunglas\\ApiBundle\\Doctrine\\Orm\\Filter\\AbstractFilter\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3\u003eOverriding extraction of properties from the request\u003c/h3\u003e\n\n\u003cp\u003eYou can change the way the filter parameters are extracted from the request. This can be done by extending the parent\nfilter class and overriding the \u003ccode\u003eextractProperties(\\Symfony\\Component\\HttpFoundation\\Request $request)\u003c/code\u003e\nmethod.\u003c/p\u003e\n\n\u003cp\u003eIn the following example, we will completely change the syntax of the order filter\nto be the following: \u003ccode\u003e?filter[order][property]\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\n// src/AppBundle/Filter/CustomOrderFilter.php\n\nnamespace AppBundle\\Filter;\n\nuse Dunglas\\ApiBundle\\Doctrine\\Orm\\OrderFilter;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nclass CustomOrderFilter extends OrderFilter\n{\n    protected function extractProperties(Request $request)\n    {\n        $filter = $request-\u0026gt;query-\u0026gt;get(\u0026#39;filter[order]\u0026#39;, []);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eFinally, register the custom filter:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e\n# app/config/services.yml\n\nservices:\n    resource.offer.custom_order_filter:\n        class:    AppBundle\\Filter\\CustomOrderFilter\n\n    resource.offer:\n        parent:    \u0026#34;api.resource\u0026#34;\n        arguments: [ \u0026#34;AppBundle\\\\Entity\\\\Offer\u0026#34; ]\n        calls:\n            -      method:    \u0026#34;initFilters\u0026#34;\n                   arguments: [ [ \u0026#34;@resource.offer.custom_order_filter\u0026#34; ] ]\n        tags:      [ { name: \u0026#34;api.resource\u0026#34; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eBeware: in \u003ca href=\"https://github.com/dunglas/DunglasApiBundle/issues/157#issuecomment-119576010\"\u003esome cases\u003c/a\u003e you may have to use double slashes in the class path to make it work:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eservices:\n    resource.offer.custom_order_filter:\n        class:    \u0026#34;AppBundle\\\\Filter\\\\CustomOrderFilter\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"data-providers.jsonld\"\u003eData providers\u003c/a\u003e\u003cbr/\u003e\nNext chapter: \u003ca href=\"serialization-groups-and-relations.jsonld\"\u003eSerialization groups and relations\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Stepan Anchugov","email":"kixxx1@gmail.com"},{"@type":"Person","Name":"Lee Siong Chan","email":"ahlee2326@me.com"},{"@type":"Person","Name":"Teoh Han Hui","email":"teohhanhui@gmail.com"},{"@type":"Person","Name":"Pierre-Henri Cumenge","email":"pierrehenric@theodo.fr"},{"@type":"Person","Name":"Antoine Bluchet","email":"soyuka@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Alexis Degrugillier","email":"alexis.degrugillier@stadline.com"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"}],"dateCreated":"2015-09-04T11:55:15+02:00","dateModified":"2016-05-21T17:49:17+02:00"}