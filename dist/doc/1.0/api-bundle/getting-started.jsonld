{"@context":"http://schema.org","@type":"CreativeWork","name":"Getting started","text":"\u003ch1\u003eGetting started\u003c/h1\u003e\n\n\u003ch2\u003eInstalling DunglasApiBundle\u003c/h2\u003e\n\n\u003cp\u003eIf you are starting a new project, the easiest way to get DunglasApiBundle up, running and well integrated with other useful\ntools including \u003ca href=\"http://php-schema.dunglas.com\"\u003ePHP Schema\u003c/a\u003e, \u003ca href=\"https://github.com/nelmio/NelmioApiDocBundle\"\u003eNelmioApiDocBundle\u003c/a\u003e,\n\u003ca href=\"https://github.com/nelmio/NelmioCorsBundle\"\u003eNelmioCorsBundle\u003c/a\u003e and \u003ca href=\"http://behat.org\"\u003eBehat\u003c/a\u003e is to install \u003ca href=\"https://github.com/dunglas/api-platform\"\u003eDunglas’s API\nPlatform\u003c/a\u003e.\nIt’s a Symfony edition packaged with the best tools to develop a REST API and sensitive default settings.\u003c/p\u003e\n\n\u003cp\u003eAlternatively, you can use \u003ca href=\"http://getcomposer.org\"\u003eComposer\u003c/a\u003e to install the standalone bundle in your project:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ecomposer require dunglas/api-bundle\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThen, update your \u003ccode\u003eapp/config/AppKernel.php\u003c/code\u003e file:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003epublic function registerBundles()\n{\n    $bundles = [\n        // ...\n        new Dunglas\\ApiBundle\\DunglasApiBundle(),\n        // ...\n    ];\n\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eRegister the routes of our API by adding the following lines to \u003ccode\u003eapp/config/routing.yml\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eapi:\n    resource: \u0026#34;.\u0026#34;\n    type:     \u0026#34;api\u0026#34;\n    prefix:   \u0026#34;/api\u0026#34; # Optional\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eConfiguring the API\u003c/h2\u003e\n\n\u003ch3\u003eMinimal configuration\u003c/h3\u003e\n\n\u003cp\u003eThe first step is to name your API. Add the following lines in \u003ccode\u003eapp/config/config.yml\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003edunglas_api:\n    title:       \u0026#34;Your API name\u0026#34;                    # The title of the API.\n    description: \u0026#34;The full description of your API\u0026#34; # The description of the API.\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe name and the description you give will be accessible through the auto-generated Hydra documentation.\u003c/p\u003e\n\n\u003ch3\u003eFull configuration\u003c/h3\u003e\n\n\u003cp\u003eHere’s the complete configuration with the default:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# Default configuration for extension with alias: \u0026#34;dunglas_api\u0026#34;\ndunglas_api:\n    title:           \u0026#34;Your API name\u0026#34;                    # Required, the title of the API.\n    description:     \u0026#34;The full description of your API\u0026#34; # Required, the description of the API.\n    cache:           false                              # The caching service to use. Set to \u0026#34;dunglas_api.mapping.cache.apc\u0026#34; to enable APC metadata caching.\n    enable_fos_user: false                              # Enable the FOSUserBundle integration.\n    collection:\n        filter_name:\n            order:   \u0026#34;order\u0026#34;                            # Keyword used for the order filter\n        order:       null                               # The default order of results. (supported by Doctrine: ASC and DESC)\n        pagination:\n            page_parameter_name:       page             # The name of the parameter handling the page number.\n            items_per_page:\n                number:                30               # The default number of items perm page in collections.\n                enable_client_request: false            # Allow the client to change the number of elements by page.\n                parameter_name:        itemsPerPage     # The name of the parameter to change the number of elements by page client side.\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe name and the description you give will be accessible through the auto-generated Hydra documentation.\u003c/p\u003e\n\n\u003ch2\u003eMapping the entities\u003c/h2\u003e\n\n\u003cp\u003eImagine you have the following Doctrine entity classes:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Product.php\n\nnamespace AppBundle\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * @ORM\\Entity\n */\nclass Product\n{\n    /**\n     * @ORM\\Column(type=\u0026#34;integer\u0026#34;)\n     * @ORM\\Id\n     * @ORM\\GeneratedValue(strategy=\u0026#34;AUTO\u0026#34;)\n     */\n    public $id;\n\n    /**\n     * @ORM\\Column\n     * @Assert\\NotBlank\n     */\n    public $name;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Offer.php\n\nnamespace AppBundle\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * @ORM\\Entity\n */\nclass Offer\n{\n    /**\n     * @ORM\\Column(type=\u0026#34;integer\u0026#34;)\n     * @ORM\\Id\n     * @ORM\\GeneratedValue(strategy=\u0026#34;AUTO\u0026#34;)\n     */\n    public $id;\n\n    /**\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;)\n     */\n    public $description;\n\n    /**\n     * @ORM\\Column(type=\u0026#34;float\u0026#34;)\n     * @Assert\\NotBlank\n     * @Assert\\Range(min=0, minMessage=\u0026#34;The price must be superior to 0.\u0026#34;)\n     * @Assert\\Type(type=\u0026#34;float\u0026#34;)\n     */\n    public $price;\n    \n    /**\n     * @ORM\\ManyToOne(targetEntity=\u0026#34;Product\u0026#34;)\n     */\n    public $product;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eRegistering the services\u003c/h2\u003e\n\n\u003cp\u003eRegister the following services (for example in \u003ccode\u003eapp/config/services.yml\u003c/code\u003e):\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eservices:\n    resource.product:\n        parent:    \u0026#34;api.resource\u0026#34;\n        arguments: [ \u0026#34;AppBundle\\\\Entity\\\\Product\u0026#34; ]\n        tags:      [ { name: \u0026#34;api.resource\u0026#34; } ]\n\n    resource.offer:\n        parent:    \u0026#34;api.resource\u0026#34;\n        arguments: [ \u0026#34;AppBundle\\\\Entity\\\\Offer\u0026#34; ]\n        tags:      [ { name: \u0026#34;api.resource\u0026#34; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003eYou’re done!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eYou now have a fully featured API exposing your Doctrine entities.\nRun the Symfony app (\u003ccode\u003eapp/console server:run\u003c/code\u003e) and browse the API entrypoint at \u003ccode\u003ehttp://localhost:8000/api\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eInteract with the API using a REST client (I recommend \u003ca href=\"https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm\"\u003ePostman\u003c/a\u003e)\nor an Hydra aware application (you should give a try to \u003ca href=\"https://github.com/lanthaler/HydraConsole\"\u003eHydra Console\u003c/a\u003e). Take\na look at the usage examples in \u003ca href=\"/features/\"\u003ethe \u003ccode\u003efeatures\u003c/code\u003e directory\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eNext chapter: \u003ca href=\"nelmio-api-doc.jsonld\"\u003eNelmioApiDocBundle integration\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Pierre-Henri Cumenge","email":"pierrehenric@theodo.fr"}],"dateCreated":"2015-09-04T11:55:15+02:00","dateModified":"2016-01-07T20:41:28+01:00"}