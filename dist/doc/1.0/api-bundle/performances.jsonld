{"@context":"http://schema.org","@type":"CreativeWork","name":"Performances","text":"\u003ch1\u003ePerformances\u003c/h1\u003e\n\n\u003ch2\u003eEnabling the metadata cache\u003c/h2\u003e\n\n\u003cp\u003eComputing metadata used by the bundle is a costly operation. Fortunately, metadata can be computed once and then cached. The\nbundle provides a built-in cache service using \u003ca href=\"https://github.com/krakjoe/apcu\"\u003eAPCu\u003c/a\u003e.\nTo enable it in the prod environment (it requires APCu to be installed), add the following lines to \u003ccode\u003eapp/config/config_prod.yml\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003edunglas_api:\n    cache: api.mapping.cache.apc\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eDunglasApiBundle leverages the \u003ca href=\"https://github.com/doctrine/cache\"\u003eDoctrine Cache\u003c/a\u003e to abstract the cache backend. If\nyou want to use a custom cache backend such as Redis, Memcache or MongoDB, register a Doctrine Cache provider as a service\nand set the \u003ccode\u003ecache\u003c/code\u003e config key to the id of the custom service you created.\u003c/p\u003e\n\n\u003cp\u003eA built-in cache warmer will be automatically executed every time you clear or warmup the cache if a cache service is configured.\u003c/p\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"external-vocabularies.jsonld\"\u003eUsing external (JSON-LD) vocabularies\u003c/a\u003e\u003cbr/\u003e\nNext chapter: \u003ca href=\"angular-integration.jsonld\"\u003eAngularJS Integration\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","Name":"KÃ©vin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kevin Saliou","email":"kevin@saliou.name"}],"dateCreated":"2015-09-04T11:55:15+02:00","dateModified":"2016-05-21T17:49:17+02:00"}