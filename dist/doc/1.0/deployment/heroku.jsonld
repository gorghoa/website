{"@context":"http://schema.org","@type":"CreativeWork","name":"Deploying an API Platform app on Heroku","text":"\u003ch1\u003eDeploying an API Platform app on Heroku\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"http://heroku.com\"\u003eHeroku\u003c/a\u003e is a popular, fast, scalable and reliable \u003cem\u003ePlatform As A Service\u003c/em\u003e (PaaS). As Heroku offers a\nfree plan including database support trough \u003ca href=\"https://www.heroku.com/postgres\"\u003eHeroku Postgres\u003c/a\u003e, it’s\na very convenient way to experiment with the API Platform.\u003c/p\u003e\n\n\u003cp\u003eThe API Platform Heroku integration also supports MySQL databases provided by \u003ca href=\"https://addons.heroku.com/cleardb\"\u003ethe ClearDB add-on\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eDeploying API Platform applications on Heroku is very straightforward and you will learn how to do it in this tutorial.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eNote: this tutorial works perfectly well with API Platform but also with any Symfony application based on the Symfony Standard\nEdition.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you haven’t already one, \u003ca href=\"https://signup.heroku.com/signup/dc\"\u003ecreate an account on Heroku\u003c/a\u003e. Then install \u003ca href=\"https://devcenter.heroku.com/articles/getting-started-with-php#local-workstation-setup\"\u003ethe Heroku\ntoolbelt\u003c/a\u003e. We guess you already\nhave a working install of \u003ca href=\"http://getcomposer.org\"\u003eComposer\u003c/a\u003e, perfect, we will need it.\u003c/p\u003e\n\n\u003cp\u003eCreate a new API Platform project as usual:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ecomposer create-project dunglas/api-platform\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eGo to the created directory. Then install the API Heroku integration library created by the API Platform team. It we will ease the deployment.\nInstall it:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ecomposer require dunglas/api-platform-heroku\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eHeroku relies on \u003ca href=\"https://devcenter.heroku.com/articles/config-vars\"\u003eenvironment variables\u003c/a\u003e for configuration. Independently of the provider you\nchoose for hosting your application, using environment variables to configure your production environment is a best practice.\nSo we will configure the library we just installed and remove the Incenteev Parameter Handler library that was bundled with\nAPI Platform. Parameter Handler generated the \u003ccode\u003eapp/config/parameters.yml\u003c/code\u003e file during the installation process.\u003c/p\u003e\n\n\u003cp\u003eOpen \u003ccode\u003ecomposer.json\u003c/code\u003e file and remove the following line in the  \u003ccode\u003erequire\u003c/code\u003e section:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e\u0026#34;incenteev/composer-parameter-handler\u0026#34;: \u0026#34;~2.0\u0026#34;,\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen remove the following script call in the \u003ccode\u003epost-install-cmd\u003c/code\u003e and \u003ccode\u003epost-update-cmd\u003c/code\u003e sections:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e\u0026#34;Incenteev\\\\ParameterHandler\\\\ScriptHandler::buildParameters\u0026#34;,\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen we must register the Composer script provided by the library we installed in the \u003ccode\u003escripts\u003c/code\u003e section of the \u003ccode\u003ecomposer.json\u003c/code\u003e\nfile:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e    \u0026#34;scripts\u0026#34;: {\n        \u0026#34;pre-install-cmd\u0026#34;: [\n          \u0026#34;Dunglas\\\\Heroku\\\\Database::createParameters\u0026#34;\n        ],\n        // ...\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eDelete \u003ccode\u003eapp/config/parameters.yml\u003c/code\u003e and \u003ccode\u003eapp/config/parameters.yml.dist\u003c/code\u003e as they will not be used anymore. The remove the\nthe following line from the \u003ccode\u003eimports\u003c/code\u003e section of \u003ccode\u003eapp/config/config.yml\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e    - { resource: parameters.yml }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWe will now create a Heroku the \u003ccode\u003eapp.json\u003c/code\u003e file at the root of the application directory to set the parameters of our application\nusing the external parameters feature of the Symfony container:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n  \u0026#34;success_url\u0026#34;: \u0026#34;/\u0026#34;,\n  \u0026#34;env\u0026#34;: {\n    \u0026#34;SYMFONY_ENV\u0026#34;: \u0026#34;prod\u0026#34;,\n    \u0026#34;SYMFONY__DATABASE_DRIVER\u0026#34;: \u0026#34;pdo_pgsql\u0026#34;,\n    \u0026#34;SYMFONY__MAILER_TRANSPORT\u0026#34;: \u0026#34;smtp\u0026#34;,\n    \u0026#34;SYMFONY__MAILER_HOST\u0026#34;: \u0026#34;your-mailer.com\u0026#34;,\n    \u0026#34;SYMFONY__MAILER_USER\u0026#34;: \u0026#34;your-mailer-username\u0026#34;,\n    \u0026#34;SYMFONY__MAILER_PASSWORD\u0026#34;: \u0026#34;your-mailer-password\u0026#34;,\n    \u0026#34;SYMFONY__CORS_ALLOW_ORIGIN\u0026#34;: \u0026#34;https://your-client-url.com\u0026#34;,\n    \u0026#34;SYMFONY__LOCALE\u0026#34;: \u0026#34;en\u0026#34;,\n    \u0026#34;SYMFONY__SECRET\u0026#34;: {\n      \u0026#34;generator\u0026#34;: \u0026#34;secret\u0026#34;\n    }\n  },\n  \u0026#34;addons\u0026#34;: [\n    \u0026#34;heroku-postgresql\u0026#34;\n  ],\n  \u0026#34;buildpacks\u0026#34;: [\n    {\n      \u0026#34;url\u0026#34;: \u0026#34;https://github.com/heroku/heroku-buildpack-php\u0026#34;\n    }\n  ]\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe file also tell to the Heroku deployment system to build a PHP container and to add the Postgres add-on.\u003c/p\u003e\n\n\u003cp\u003eIf you also want to run your app locally or on another hosting provider, don’t forget to set those environment variables\nand another one called \u003ccode\u003eDATABASE_URL\u003c/code\u003e containing your database DSN.\nA convenient way to manage environment variable is the \u003ca href=\"https://github.com/vlucas/phpdotenv\"\u003ePHP dotenv\u003c/a\u003e library.\u003c/p\u003e\n\n\u003cp\u003eWe are almost done, but API Platform (and Symfony) have a particular directory structure, the document root is \u003ccode\u003eweb/\u003c/code\u003e, other\ndirectory must be private and we must tell it to Heroku. Create a new file at the root of the application directory named\n\u003ccode\u003eProcfile\u003c/code\u003e with the following content:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eweb: bin/heroku-php-apache2 web/\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eOur application is ready to be deployed, but Heroku dynos are not persistent and file stored directly on the filesystem\nwill be lost. It’s problematic for our logs.\u003c/p\u003e\n\n\u003cp\u003eNote: if you want to store files permanently, use a persistent file storage service such as Amazon S3.\u003c/p\u003e\n\n\u003cp\u003eHeroku provides another free service called  \u003ca href=\"https://devcenter.heroku.com/articles/logplex\"\u003ehttps://devcenter.heroku.com/articles/logplex\u003c/a\u003e allowing to centralize and\npersist applications logs. To use it we need to configure Monolog to output logs on \u003ccode\u003eSTDERR\u003c/code\u003e instead of in a file.\u003c/p\u003e\n\n\u003cp\u003eOpen \u003ccode\u003eapp/config/config_prod.yml\u003c/code\u003e, find the following block:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e    monolog:\n        # ...\n        nested:\n            type:  stream\n            path:  \u0026#34;%kernel.logs_dir%/%kernel.environment%.log\u0026#34;\n            level: debug\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAnd replace it by:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e    monolog:\n        # ...\n        nested:\n            type:  stream\n            path:  \u0026#34;php://stderr\u0026#34;\n            level: debug\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWe are ready to deploy our app!\u003c/p\u003e\n\n\u003cp\u003eInitialize a git repository:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003egit init\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAdd all existing files:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003egit add --all\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eCommit:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003egit commit -a -m \u0026#34;My first API Platform app running on Heroku!\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eCreate the Heroku application:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eheroku create\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAnd deploy for the first time:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003egit push heroku master\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYour browser should open automatically and display the entrypoint of the API. It’s time to create the database:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eheroku run \u0026#34;app/console doctrine:schema:create\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003eWe’re done.\u003c/strong\u003e You can play with the demo bookstore API provided with API Platform. It is ready for production and you\ncan scale it in one click from the Heroku interface.\u003c/p\u003e\n\n\u003cp\u003eTo see your logs, run \u003ccode\u003eheroku logs --tail\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eCan it be easier? Yes it can: we are preparing an API Platform edition preconfigured to run on Heroku! Stay tuned.\u003c/p\u003e\n","author":[{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Stepan Anchugov","email":"kixxx1@gmail.com"}],"dateCreated":"2015-06-29T16:19:03+02:00","dateModified":"2015-09-22T13:36:13+05:00"}