{"@context":"http://schema.org","@type":"CreativeWork","name":"An AngularJS client","text":"\u003ch1\u003eAn AngularJS client\u003c/h1\u003e\n\n\u003cp\u003ePrerequisites:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHaving finished \u003ca href=\"api.jsonld\"\u003ethe API tutorial\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://nodejs.org/\"\u003eNode.js\u003c/a\u003e and \u003ca href=\"https://www.npmjs.com/\"\u003eNPM\u003c/a\u003e installed.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAPI Platform is agnostic of the client-side technology. You can use whatever platform, language or framework you want. As\nan illustration of doors opened by an API-first architecture and the ease of development of SPA, we will create a tiny AngularJS\nclient.\u003c/p\u003e\n\n\u003cp\u003eKeep in mind that \u003cstrong\u003ethis is not an AngularJS tutorial\u003c/strong\u003e and it doesn’t pretend to follow AngularJS best practices. It’s\njust an example of how simple application development become when all the business logic is encapsulated in an API. The\nunique responsibility of our AngularJS blog client is to display informations retrieved by the API (presentation layer).\u003c/p\u003e\n\n\u003cp\u003eThe AngularJS application is fully independent of the API. It’s a HTML/JS/CSS app querying an API trough AJAX. It leaves\nin its own Git repository and is hosted on its own web server. As it only contains assets, it can even be hosted directly\non a CDN such as Amazon CloudFront or Akamai.\u003c/p\u003e\n\n\u003cp\u003eTo scaffold our AngularJS app we will use the official \u003ca href=\"https://github.com/yeoman/generator-angular\"\u003eAngular generator\u003c/a\u003e\nof \u003ca href=\"http://yeoman.io/\"\u003eYeoman\u003c/a\u003e. Install the generator then generate a client skeleton:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003emkdir blog-client\ncd blog-client\nyo angular blog\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYeoman will ask some questions. We want to keep the app minimal:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003edon’t install Sass support\u003c/li\u003e\n\u003cli\u003einstall Twitter Bootstrap (it’s optional but the app will look better)\u003c/li\u003e\n\u003cli\u003euncheck all suggested angular modules\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHowever, we will install \u003ca href=\"https://github.com/mgonto/restangular\"\u003eRestangular\u003c/a\u003e, an awesome REST client for Angular that fit\nwell with API Platform:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ebower install --save lodash restangular\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe Angular generator comes with the \u003ca href=\"http://gruntjs.com/\"\u003eGrunt\u003c/a\u003e build tool. It compiles assets (minification, compression)\nand can serve the web app with an integrated development web server. Start it:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003egrunt serve\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eDunglasApiBundle provides \u003ca href=\"https://github.com/dunglas/DunglasApiBundle/blob/master/Resources/doc/angular-integration.md\"\u003ea Restangular integration guide\u003c/a\u003e\nin its documentation. Once configured, Restangular will work with the JSON-LD/Hydra API like with any other standard REST\nAPI.\u003c/p\u003e\n\n\u003cp\u003eThen edit \u003ccode\u003eapp/app.js\u003c/code\u003e file to register Restangular and configure it properly:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e// app/scripts/app.js\n \n\u0026#39;use strict\u0026#39;;\n \n/**\n * @ngdoc overview\n * @name blogApp\n * @description\n * # blogApp\n *\n * Main module of the application.\n */\nangular\n    .module(\u0026#39;blogApp\u0026#39;, [\u0026#39;restangular\u0026#39;])\n    .config([\u0026#39;RestangularProvider\u0026#39;, function (RestangularProvider) {\n        // The URL of the API endpoint\n        RestangularProvider.setBaseUrl(\u0026#39;http://localhost:8000\u0026#39;);\n \n        // JSON-LD @id support\n        RestangularProvider.setRestangularFields({\n            id: \u0026#39;@id\u0026#39;\n        });\n        RestangularProvider.setSelfLinkAbsoluteUrl(false);\n \n        // Hydra collections support\n        RestangularProvider.addResponseInterceptor(function (data, operation) {\n            // Remove trailing slash to make Restangular working\n            function populateHref(data) {\n                if (data[\u0026#39;@id\u0026#39;]) {\n                    data.href = data[\u0026#39;@id\u0026#39;].substring(1);\n                }\n            }\n \n            // Populate href property for the collection\n            populateHref(data);\n \n            if (\u0026#39;getList\u0026#39; === operation) {\n                var collectionResponse = data[\u0026#39;hydra:member\u0026#39;];\n                collectionResponse.metadata = {};\n \n                // Put metadata in a property of the collection\n                angular.forEach(data, function (value, key) {\n                    if (\u0026#39;hydra:member\u0026#39; !== key) {\n                        collectionResponse.metadata[key] = value;\n                    }\n                });\n \n                // Populate href property for all elements of the collection\n                angular.forEach(collectionResponse, function (value) {\n                    populateHref(value);\n                });\n \n                return collectionResponse;\n            }\n \n            return data;\n        });\n    }])\n;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eBe sure to change the base URL with the one of your API in production (\u003cem\u003eprotip\u003c/em\u003e: use \u003ca href=\"https://github.com/werk85/grunt-ng-constant\"\u003egrunt-ng-constant\u003c/a\u003e).\u003c/p\u003e\n\n\u003cp\u003eAnd here is the controller retrieving the posts list and allowing to create a new one:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e// app/scripts/controllers/main.js\n\n\u0026#39;use strict\u0026#39;;\n\n/**\n * @ngdoc function\n * @name blogApp.controller:MainCtrl\n * @description\n * # MainCtrl\n * Controller of the blogApp\n */\nangular.module(\u0026#39;blogApp\u0026#39;)\n    .controller(\u0026#39;MainCtrl\u0026#39;, function ($scope, Restangular) {\n        var blogPostingApi = Restangular.all(\u0026#39;blog_postings\u0026#39;);\n        var peopleApi = Restangular.all(\u0026#39;people\u0026#39;);\n\n        function loadPosts() {\n            blogPostingApi.getList().then(function (posts) {\n                $scope.posts = posts;\n            });\n        }\n\n        loadPosts();\n        peopleApi.getList().then(function (people) {\n            $scope.people = people;\n        });\n\n        $scope.newPost = {};\n        $scope.success = false;\n        $scope.errorTitle = false;\n        $scope.errorDescription = false;\n\n        $scope.createPost = function (form) {\n            blogPostingApi.post($scope.newPost).then(function () {\n                loadPosts();\n\n                $scope.success = true;\n                $scope.errorTitle = false;\n                $scope.errorDescription = false;\n\n                $scope.newPost = {};\n                form.$setPristine();\n            }, function (response) {\n                $scope.success = false;\n                $scope.errorTitle = response.data[\u0026#39;hydra:title\u0026#39;];\n                $scope.errorDescription = response.data[\u0026#39;hydra:description\u0026#39;];\n            });\n        };\n    });\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAs you can see, querying the API with Restangular is easy and very intuitive. The library automatically issues HTTP requests\nto the server and hydrates “magic” JavaScript objects corresponding to JSON responses that can be manipulated to modify\nremote resources (trough \u003ccode\u003ePUT\u003c/code\u003e, \u003ccode\u003ePOST\u003c/code\u003e and \u003ccode\u003eDELETE\u003c/code\u003e requests).\u003c/p\u003e\n\n\u003cp\u003eWe also leverage the server side error handling to display beautiful messages when submitted data are invalid or when something\ngoes wrong.\u003c/p\u003e\n\n\u003cp\u003eAnd the corresponding view looping over posts and displaying the form and errors:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-html\"\u003e\u0026lt;!-- app/views/main.html --\u0026gt;\n\n\u0026lt;!-- ... --\u0026gt;\n\n\u0026lt;article ng-repeat=\u0026#34;post in posts\u0026#34; id=\u0026#34;{{ post[\u0026#39;@id\u0026#39;] }}\u0026#34; class=\u0026#34;row marketing\u0026#34;\u0026gt;\n    \u0026lt;h1\u0026gt;{{ post.name }}\u0026lt;/h1\u0026gt;\n    \u0026lt;h2\u0026gt;{{ post.headline }}\u0026lt;/h2\u0026gt;\n\n    \u0026lt;header\u0026gt;\n        Date: {{ post.datePublished | date:\u0026#39;medium\u0026#39; }}\n        \u0026lt;span ng-hide=\u0026#34;post.isFamilyFriendly\u0026#34;\u0026gt; - \u0026lt;b\u0026gt;NSFW\u0026lt;/b\u0026gt;\u0026lt;/span\u0026gt;\n    \u0026lt;/header\u0026gt;\n\n    \u0026lt;p\u0026gt;{{ post.articleBody }}\u0026lt;/p\u0026gt;\n\n    \u0026lt;footer\u0026gt;\n        Section: {{ post.articleSection }}\n    \u0026lt;/footer\u0026gt;\n\u0026lt;/article\u0026gt;\n\n\u0026lt;form name=\u0026#34;createPostForm\u0026#34; ng-submit=\u0026#34;createPost(createPostForm)\u0026#34; class=\u0026#34;row marketing\u0026#34;\u0026gt;\n    \u0026lt;h1\u0026gt;Post a new article\u0026lt;/h1\u0026gt;\n\n    \u0026lt;div ng-show=\u0026#34;success\u0026#34; class=\u0026#34;alert alert-success\u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt;Post published.\u0026lt;/div\u0026gt;\n    \u0026lt;div ng-show=\u0026#34;errorTitle\u0026#34; class=\u0026#34;alert alert-danger\u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt;\n        \u0026lt;b\u0026gt;{{ errorTitle }}\u0026lt;/b\u0026gt;\u0026lt;br\u0026gt;\n\n        {{ errorDescription }}\n    \u0026lt;/div\u0026gt;\n\n    \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt;\n        \u0026lt;input ng-model=\u0026#34;newPost.name\u0026#34; placeholder=\u0026#34;Name\u0026#34; class=\u0026#34;form-control\u0026#34;\u0026gt;\n    \u0026lt;/div\u0026gt;\n\n    \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt;\n        \u0026lt;input ng-model=\u0026#34;newPost.headline\u0026#34; placeholder=\u0026#34;Headline\u0026#34; class=\u0026#34;form-control\u0026#34;\u0026gt;\n    \u0026lt;/div\u0026gt;\n\n    \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt;\n        \u0026lt;textarea ng-model=\u0026#34;newPost.articleBody\u0026#34; placeholder=\u0026#34;Body\u0026#34; class=\u0026#34;form-control\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt;\n    \u0026lt;/div\u0026gt;\n\n    \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt;\n        \u0026lt;label for=\u0026#34;author\u0026#34;\u0026gt;Author\u0026lt;/label\u0026gt;\n        \u0026lt;select ng-model=\u0026#34;newPost.author\u0026#34; ng-options=\u0026#34;person[\u0026#39;@id\u0026#39;] as person.name for person in people\u0026#34; id=\u0026#34;author\u0026#34;\u0026gt;\n        \u0026lt;/select\u0026gt;\n    \u0026lt;/div\u0026gt;\n\n    \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt;\n        \u0026lt;input ng-model=\u0026#34;newPost.datePublished\u0026#34; placeholder=\u0026#34;Date published\u0026#34; class=\u0026#34;form-control\u0026#34;\u0026gt;\n    \u0026lt;/div\u0026gt;\n\n    \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt;\n        \u0026lt;input ng-model=\u0026#34;newPost.articleSection\u0026#34; placeholder=\u0026#34;Section\u0026#34; class=\u0026#34;form-control\u0026#34;\u0026gt;\n    \u0026lt;/div\u0026gt;\n\n    \u0026lt;div class=\u0026#34;checkbox\u0026#34;\u0026gt;\n        \u0026lt;label\u0026gt;\n            \u0026lt;input type=\u0026#34;checkbox\u0026#34; ng-model=\u0026#34;newPost.isFamilyFriendly\u0026#34;\u0026gt; is family friendly?\n        \u0026lt;/label\u0026gt;\n    \u0026lt;/div\u0026gt;\n\n    \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt;\n\u0026lt;/form\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIt’s the end of this tutorial. Our blog client is ready and working! Remember of the old way of doing synchronous web apps?\nWhat do you think of this new approach? Easier and very much powerful isn’t it?\u003c/p\u003e\n\n\u003cp\u003eOf course there are some tasks to have a finished client including routing, pagination support and injecting raw JSON-LD\nin the generated HTML for search engines (use \u003ca href=\"https://github.com/mgonto/restangular/issues/100\"\u003ethe response extractor hook\u003c/a\u003e\nprovided by Restangular). As it’s only Angular tasks, it’s out of scope of this introduction to API Platform. But it’s a\ngood exercise to add such features to the client. Feel free to share your snippets!\u003c/p\u003e\n","author":[{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"}],"dateCreated":"2015-06-29T16:19:03+02:00","dateModified":"2015-09-10T18:02:30+02:00"}