{"@context":"http://schema.org","@type":"CreativeWork","name":"Creating your first API with API Platform","text":"\u003ch1\u003eCreating your first API with API Platform\u003c/h1\u003e\n\n\u003cp\u003eIn this tutorial, we will create a typical blog application with API Platform.\u003c/p\u003e\n\n\u003cp\u003eIf you are in a hurry, a demo is available online and all sources created during this tutorial are available on GitHub:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ethe blog API : \u003ca href=\"https://api-platform-demo-blog-api.herokuapp.com\"\u003edemo\u003c/a\u003e (we recommend to browse it with \u003ca href=\"http://getpostman.com\"\u003ePostman\u003c/a\u003e)\n/ \u003ca href=\"https://github.com/dunglas/blog-api\"\u003esources\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ethe Angular client: \u003ca href=\"https://dunglas.github.io/blog-client/\"\u003edemo\u003c/a\u003e / \u003ca href=\"https://github.com/dunglas/blog-client\"\u003esources\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"images/blog-api-platform.png\" alt=\"Screenshot of the blog\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eTo create the API-side of our project we will:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eBootstrap a fully featured and working data model including ORM mapping, validation rules and semantic metadata with the\ngenerator provided by API platform (of course you can also handcraft your data model or modify the generated one to fit\nyour needs).\u003c/li\u003e\n\u003cli\u003eExpose this data model trough a read/write (CRUD) API following JSON-LD and \u003ca href=\"http://www.hydra-cg.com/\"\u003eHydra Core Vocabulary\u003c/a\u003e\nopen standards, having Schema.org metadata and with a ton of features out of the box: pagination, validation, error serialization,\nfilters and a lot of other awesome features (here too, everything is extensible thanks to a powerful event system and\nstrong OOP).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThen we will develop a tiny AngularJS webapp to illustrate how to create and consume data from the API. Keep in mind that\nyou can use your preferred client-side technology (tested and approved with Angular, React, Ionic, Swift but can work with\nany language able to send HTTP requests).\u003c/p\u003e\n\n\u003ch2\u003ePrerequisites\u003c/h2\u003e\n\n\u003cp\u003eOnly PHP 5.5+ must be installed to run API Platform. A built-in web server is shipped with the framework for the\ndevelopment environment.\u003c/p\u003e\n\n\u003cp\u003eTo follow this tutorial a database must be installed (but its not a strong dependency of the framework). We recommend MySQL\nor MariaDB but other major DBMS are supported including SQLite, PostgreSQL, Oracle and SQL server are supported trough\n\u003ca href=\"http://doctrine-project.org\"\u003eDoctrine\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eInstalling the framework\u003c/h2\u003e\n\n\u003cp\u003eLet’s start our new blog API project. The easiest way to create a new project is to use \u003ca href=\"https://getcomposer.org/\"\u003eComposer\u003c/a\u003e\n(you need to have it installed on your box):\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ecomposer create-project api-platform/api-platform blog-api\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eComposer creates the skeleton of the new blog API then retrieve the framework and all its dependencies.\u003c/p\u003e\n\n\u003cp\u003eAt the end of the installation, you will be prompted for some configuration parameters including database credentials.\nAll configuration parameters can be changed later by editing the \u003ccode\u003eapp/config/parameters.yml\u003c/code\u003e file.\u003c/p\u003e\n\n\u003cp\u003eAPI Platform is pre-configured to use the popular \u003ca href=\"http://www.doctrine-project.org/projects/orm.html\"\u003eDoctrine ORM\u003c/a\u003e.\nIt is supported natively by all API Platform components. However the Doctrine ORM is fully optional: you can replace it\nby your favorite ORM, no ORM at all and even no database.\u003c/p\u003e\n\n\u003cp\u003eThe installer will ask for:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003email server credentials (to send mails)\u003c/li\u003e\n\u003cli\u003ethe locale of the application\u003c/li\u003e\n\u003cli\u003ethe URL of your default web client application to automatically set appropriate \u003ca href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\"\u003eCORS\u003c/a\u003e\nheaders, \u003cstrong\u003eset it to \u003ccode\u003ehttp://locahost:9000\u003c/code\u003e (the default URL of the built-in Grunt server) to follow this tutorial\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003ea name and a description of the API that will be used in the generated documentation\u003c/li\u003e\n\u003cli\u003ea secret token (choose a long one) for cryptographic features\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTake a look at \u003ca href=\"https://github.com/dunglas/blog-api\"\u003ethe content of the generated directory\u003c/a\u003e. You should recognize a \u003ca href=\"https://symfony.com/doc/current/quick_tour/the_architecture.html\"\u003eSymfony\napplication directory structure\u003c/a\u003e. It’s fine and intended:\n\u003cstrong\u003ethe generated skeleton is a perfectly valid Symfony full-stack application\u003c/strong\u003e that follows \u003ca href=\"https://symfony.com/doc/current/best_practices/index.html\"\u003eSymfony Best Practices\u003c/a\u003e.\nIt means that you can:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://knpbundles.com\"\u003euse thousands of exiting Symfony bundles\u003c/a\u003e with API Platform\u003c/li\u003e\n\u003cli\u003euse API Platform in any existing Symfony application\u003c/li\u003e\n\u003cli\u003ereuse all your Symfony skills and benefit of the high quality \u003ca href=\"https://symfony.com/doc/current/index.html\"\u003eSymfony documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe skeleton comes with a demonstration bookstore API. Remove it:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eempty \u003ccode\u003eapp/config/schema.yml\u003c/code\u003e and  \u003ccode\u003eapp/config/services.yml\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003edelete all files in the \u003ccode\u003esrc/AppBundle/Entity/\u003c/code\u003e directory\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eGenerating the data model\u003c/h2\u003e\n\n\u003cp\u003eThe first incredibly useful tool provided by API platform is \u003ca href=\"../schema-generator/index.jsonld\"\u003eits data model generator\u003c/a\u003e.\nThis API Platform component can also be used standalone to bootstrap any PHP data model.\u003c/p\u003e\n\n\u003cp\u003eTo kickstart our blog data model we browse \u003ca href=\"http://schema.org\"\u003eSchema.org\u003c/a\u003e and find an existing schema that describe perfectly\nwhat we want: \u003ca href=\"https://schema.org/BlogPosting\"\u003ehttps://schema.org/BlogPosting\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eschema\u003c/code\u003e command line tool will instantly generate a PHP data model from the \u003ca href=\"http://schema.org/\"\u003eSchema.org\u003c/a\u003e vocabulary:\u003c/p\u003e\n\n\u003cp\u003eBrowse Schema.org, choose the types and properties you need (there is a bunch of schemas available), run our code generator. You’re done! You get a fully featured PHP data model including:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA set of PHP entities with properties, constants (enum values), getters, setters, adders and removers. The class hierarchy\nprovided by Schema.org will be translated to a PHP class hierarchy with parents as \u003ccode\u003eabstract\u003c/code\u003e classes. The generated code\ncomplies with \u003ca href=\"http://www.php-fig.org/\"\u003ePSR\u003c/a\u003e coding standards.\u003c/li\u003e\n\u003cli\u003eFull high-quality PHPDoc for classes, properties, constants and methods extracted from Schema.org.\u003c/li\u003e\n\u003cli\u003eDoctrine ORM annotation mapping including database columns with type guessing, relations with cardinality guessing, class\ninheritance (through the \u003ccode\u003e@AbstractSuperclass\u003c/code\u003e annotation).\u003c/li\u003e\n\u003cli\u003eData validation through \u003ca href=\"https://symfony.com/doc/current/book/validation.html\"\u003eSymfony Validator\u003c/a\u003e annotations including\ndata type validation, enum support (choices) and check for required properties.\u003c/li\u003e\n\u003cli\u003eInterfaces and \u003ca href=\"http://doctrine-orm.readthedocs.org/en/latest/cookbook/resolve-target-entity-listener.html\"\u003eDoctrine \u003ccode\u003eResolveTargetEntityListener\u003c/code\u003e\u003c/a\u003e\nsupport.\u003c/li\u003e\n\u003cli\u003eList of values provided by Schema.org with \u003ca href=\"https://github.com/myclabs/php-enum\"\u003ePHP Enum\u003c/a\u003e classes.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eReusing an existing semantic schema has many advantages:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDon’t Reinvent The Wheel\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eData models provided by Schema.org are popular and have been proved efficient. They cover a broad spectrum of topics including\ncreative work, e-commerce, event, medicine, social networking, people, postal address, organization, place or review. Schema.org\nhas its root in \u003ca href=\"http://schema.rdfs.org/mappings.html\"\u003ea ton of preexisting well designed vocabularies\u003c/a\u003e and is successfully\nused by more and more website and applications.\u003c/p\u003e\n\n\u003cp\u003ePick up schemas applicable to your application, generate your PHP model, then customize and specialize it to fit your needs.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eImprove SEO and user experience\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAdding Schema.org markup to websites and apps increase their ranking in search engines results and enable awesome features\nsuch as \u003ca href=\"https://support.google.com/webmasters/answer/99170?hl=en\"\u003eGoogle Rich Snippets\u003c/a\u003e and \u003ca href=\"https://developers.google.com/gmail/markup/overview\"\u003eGmail markup\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eMapping your app data model to Schema.org structures can be a tedious task. Using the generator, your data model will be\na derived from Schema.org. Serializing your data as JSON-LD will not require specific mapping nor adaptation. It’s a matter\nof minutes.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eBe ready for the future\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eSchema.org improves the interoperability of your applications. Used with hypermedia technologies such as \u003ca href=\"http://www.hydra-cg.com/\"\u003eHydra\u003c/a\u003e\nit’s a big step towards the semantic and machine readable web. It opens the way to generic web API clients able to extract\nand process data from any website or app using such technologies.\u003c/p\u003e\n\n\u003cp\u003eTo generate our data model form Schema.org types, we must create a YAML configuration file for PHP schema:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/schema.yml\n \nannotationGenerators: # Generators we want to use, keep it as is for any API Platform project\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\PhpDocAnnotationGenerator\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\DoctrineOrmAnnotationGenerator\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\ConstraintAnnotationGenerator\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\DunglasApiAnnotationGenerator\nnamespaces:\n  entity: AppBundle\\Entity # The default namespace for entities, following API Platform and Symfony best practices\ntypes: # The list of type to generated (a PHP entity class by type will be generated)\n  SocialMediaPosting: ~\n  BlogPosting: ~ # A type to generate a PHP entity class from, including all its properties (here this type has no specific property, they are all inherited)\n  Article: # Schema.org has an inheritance system, we will configure all types of the hierarchy\n    properties: # The list of properties we want to use\n      articleBody: ~\n      articleSection: ~\n  CreativeWork:\n    properties:\n      author:\n        range: Person # PHP Schema handle relations. Here we force the type of the property to Person\n        cardinality: (*..0) # Force the cardinality of the relation\n      headline: ~\n      isFamilyFriendly: ~\n      datePublished: ~\n  Thing:\n    properties:\n      name: ~\n  Person: # Person is a relation of the \u0026#34;CreativeWork\u0026#34; type (property \u0026#34;author\u0026#34;), PHP Schema will generate relations for us\n    properties: {} # We don\u0026#39;t want any specific property for a person except \u0026#34;name\u0026#34; inherited from Thing\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen execute the generator:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ebin/schema generate-types src/ app/config/schema.yml\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eTake a look at the content of the \u003ca href=\"https://github.com/dunglas/blog-api/tree/master/src/AppBundle/Entity\"\u003esrc/AppBundle/Entity/\u003c/a\u003e directory. PHP Schema generated for us a set of Plain-Old-PHP entities representing our data model. As promised our entities include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003etype documentation from Schema.org and converted it to PHPDoc\u003c/li\u003e\n\u003cli\u003eDoctrine ORM mapping annotations (including for relations)\u003c/li\u003e\n\u003cli\u003eSymfony validation annotations\u003c/li\u003e\n\u003cli\u003eSchema.org IRI mapping (the @Iri annotations), we will see later that the API bundle use them to expose structured semantic\ndata\u003c/li\u003e\n\u003cli\u003eand they follow the \u003ca href=\"http://www.php-fig.org/psr/psr-2/\"\u003ePSR-2 coding style\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe data model is fully functional. You can hack it (modify entities, properties, indexes, validation rules…), or use it\nas is!\u003c/p\u003e\n\n\u003cp\u003eAsk Doctrine to create the database of the project:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eapp/console doctrine:database:create\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen generate database tables related to the generated entities:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eapp/console doctrine:schema:create\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePHP Schema provides a lot of configuration options. Take a look at \u003ca href=\"../schema-generator/index.jsonld\"\u003eits dedicated documentation\u003c/a\u003e.\nKeep in mind that PHP Schema is also available as a standalone tool (and a PHAR will be available soon) and can be used\nto bootstrap any PHP project (works fine with raw PHP, API Platform and Symfony but has an extension mechanism allowing\nto use it with other technologies such as Zend Framework and Laravel).\u003c/p\u003e\n\n\u003cp\u003eSometimes we will have to make a data model with very specific business types, not available in Schema.org. Sometimes we\nwill find Schema.org types that partially matches what we want but needs to be adapted.\u003c/p\u003e\n\n\u003cp\u003eKeep in mind that you can always create your very own data model from scratch. It’s perfectly OK and you can still use API\nPlatform without PHP Schema.\u003c/p\u003e\n\n\u003cp\u003eAnyway, PHP Schema is a tool intended \u003cstrong\u003eto bootstrap\u003c/strong\u003e the data model. You can and \u003cstrong\u003eyou will\u003c/strong\u003e edit manually generated\nPHP entities. When you start to edit manually the generated files, be careful to not run the generator again, it will\noverwrite your changes (this behavior will be enhanced in future versions). When you do such things, the best to do is to\nremove \u003ccode\u003edunglas/php-schema\u003c/code\u003e from your \u003ccode\u003ecomposer.json\u003c/code\u003e file.\u003c/p\u003e\n\n\u003ch2\u003eExposing the API\u003c/h2\u003e\n\n\u003cp\u003eWe have a working data model backed by a database. Now we will create a hypermedia REST API thanks to another component\nof API Platform: \u003cstrong\u003e\u003ca href=\"../api-bundle/index.jsonld\"\u003eApiBundle\u003c/a\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eAs PHP Schema, it is already preinstalled and properly configured. We just need to declare resources we want to expose.\u003c/p\u003e\n\n\u003cp\u003eExposing a resource collection basically consist to register a new \u003ca href=\"https://symfony.com/doc/current/book/service_container.html\"\u003eSymfony service\u003c/a\u003e.\nFor our blog app we will expose trough the API the two entity classes generated by PHP Schema: \u003ccode\u003eBlogPosting\u003c/code\u003e (blog post)\nand \u003ccode\u003ePerson\u003c/code\u003e (author of the post):\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n \nservices:\n    resource.blog_posting:\n        parent:    \u0026#34;api.resource\u0026#34;\n        arguments: [ \u0026#34;AppBundle\\\\Entity\\\\BlogPosting\u0026#34; ]\n        tags:      [ { name: \u0026#34;api.resource\u0026#34; } ]\n \n    resource.person:\n        parent:    \u0026#34;api.resource\u0026#34;\n        arguments: [ \u0026#34;AppBundle\\\\Entity\\\\Person\u0026#34; ]\n        tags:      [ { name: \u0026#34;api.resource\u0026#34; } ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAnd our API is already finished! How would it be easier?\u003c/p\u003e\n\n\u003cp\u003eStart the integrated development web server: \u003ccode\u003eapp/console server:start\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThen open \u003ccode\u003ehttp://localhost:8000/doc\u003c/code\u003e with a web browser:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"images/api-doc.png\" alt=\"API doc\"/\u003e]\u003c/p\u003e\n\n\u003cp\u003eThanks to \u003ca href=\"https://github.com/nelmio/NelmioApiDocBundle\"\u003eNelmioApiDocBundle\u003c/a\u003e support of ApiBundle and its integration\nwith API Platform, you get for a free \u003cstrong\u003ean automatically generated human-readable documentation\u003c/strong\u003e of the API (Swagger-like).\nThe doc also \u003cstrong\u003eincludes a sandbox\u003c/strong\u003e to try the API.\u003c/p\u003e\n\n\u003cp\u003eYou can also use your favorite HTTP client to query the API. I strongly recommend \u003ca href=\"https://www.getpostman.com\"\u003ePostman\u003c/a\u003e.\nIt is lower level than the sandbox and will allow to inspect forge and inspect JSON requests and responses easily.\u003c/p\u003e\n\n\u003cp\u003eOpen \u003ccode\u003ehttp://localhost:8000\u003c/code\u003e with Postman. This URL is the entry point of the API. It gives to access to all exposed\nresources. As you can see, the API returns minified JSON-LD. For better readability, JSON snippets have been prettified\nin this document.\u003c/p\u003e\n\n\u003ch2\u003eTrying the API\u003c/h2\u003e\n\n\u003cp\u003eAdd a person named Kévin by issuing a POST request on \u003ccode\u003ehttp://localhost:8000/people\u003c/code\u003e with the following JSON document as\nraw body:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\u0026#34;name\u0026#34;: \u0026#34;Kévin\u0026#34;}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe data is inserted in database. The server replies with a JSON-LD representation of the freshly created resource. Thanks to PHP Schema, the \u003cspan id=\"crayon-559138917f5b1290623877\"\u003e\u003cspan\u003e\u003cspan\u003e@\u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e property of the JSON-LD document is referencing a Schema.org type:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n    \u0026#34;@context\u0026#34;: \u0026#34;/contexts/Person\u0026#34;,\n    \u0026#34;@id\u0026#34;: \u0026#34;/people/1\u0026#34;,\n    \u0026#34;@type\u0026#34;: \u0026#34;http://schema.org/Person\u0026#34;,\n    \u0026#34;name\u0026#34;: \u0026#34;Kévin\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe JSON-LD spec is fully supported by the bundle. Want a proof? Browse \u003ccode\u003ehttp://localhost:8000/contexts/Person\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBy default, the API allows \u003ccode\u003eGET\u003c/code\u003e (retrieve, on collections and items), \u003ccode\u003ePOST\u003c/code\u003e (create), \u003ccode\u003ePUT\u003c/code\u003e (update) and \u003ccode\u003eDELETE\u003c/code\u003e (self-explaining)\nHTTP methods. \u003ca href=\"../api-bundle/operations.jsonld\"\u003eYou can add and remove any other operation you want\u003c/a\u003e.\nTry it!\u003c/p\u003e\n\n\u003cp\u003eNow, browse \u003ccode\u003ehttp://localhost:8000/people\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n    \u0026#34;@context\u0026#34;: \u0026#34;/contexts/Person\u0026#34;,\n    \u0026#34;@id\u0026#34;: \u0026#34;/people\u0026#34;,\n    \u0026#34;@type\u0026#34;: \u0026#34;hydra:PagedCollection\u0026#34;,\n    \u0026#34;hydra:totalItems\u0026#34;: 1,\n    \u0026#34;hydra:itemsPerPage\u0026#34;: 30,\n    \u0026#34;hydra:firstPage\u0026#34;: \u0026#34;/people\u0026#34;,\n    \u0026#34;hydra:lastPage\u0026#34;: \u0026#34;/people\u0026#34;,\n    \u0026#34;hydra:member\u0026#34;: [\n        {\n            \u0026#34;@id\u0026#34;: \u0026#34;/people/1\u0026#34;,\n            \u0026#34;@type\u0026#34;: \u0026#34;http://schema.org/Person\u0026#34;,\n            \u0026#34;name\u0026#34;: \u0026#34;Kévin\u0026#34;\n        }\n    ]\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePagination is also supported (and enabled) out of the box.\u003c/p\u003e\n\n\u003cp\u003eIt’s time to post our first article. Run a POST request on \u003ccode\u003ehttp://locahost:8000/blog_postings\u003c/code\u003e with the following JSON document\nas body:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n    \u0026#34;name\u0026#34;: \u0026#34;API Platform is great\u0026#34;,\n    \u0026#34;headline\u0026#34;: \u0026#34;You\u0026#39;ll love that framework!\u0026#34;,\n    \u0026#34;articleBody\u0026#34;: \u0026#34;The body of my article.\u0026#34;,\n    \u0026#34;articleSection\u0026#34;: \u0026#34;technology\u0026#34;,\n    \u0026#34;author\u0026#34;: \u0026#34;/people/1\u0026#34;,\n    \u0026#34;isFamilyFriendly\u0026#34;: \u0026#34;maybe\u0026#34;,\n    \u0026#34;datePublished\u0026#34;: \u0026#34;2015-05-11\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eOops… the \u003ccode\u003eisFamilyFriendly\u003c/code\u003e property is a boolean. Our JSON contains an incorrect string. Fortunately the bundle is smart\nenough to detect the error: it uses Symfony validation annotations generated by PHP Schema previously. It returns a detailed\nerror message in the Hydra error serialization format:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n    \u0026#34;@context\u0026#34;: \u0026#34;/contexts/ConstraintViolationList\u0026#34;,\n    \u0026#34;@type\u0026#34;: \u0026#34;ConstraintViolationList\u0026#34;,\n    \u0026#34;hydra:title\u0026#34;: \u0026#34;An error occurred\u0026#34;,\n    \u0026#34;hydra:description\u0026#34;: \u0026#34;isFamilyFriendly: This value should be of type boolean.\\n\u0026#34;,\n    \u0026#34;violations\u0026#34;: [\n        {\n            \u0026#34;propertyPath\u0026#34;: \u0026#34;isFamilyFriendly\u0026#34;,\n            \u0026#34;message\u0026#34;: \u0026#34;This value should be of type boolean.\u0026#34;\n        }\n    ]\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eCorrect the body and send the request again:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n    \u0026#34;name\u0026#34;: \u0026#34;API Platform is great\u0026#34;,\n    \u0026#34;headline\u0026#34;: \u0026#34;You\u0026#39;ll love that framework!\u0026#34;,\n    \u0026#34;articleBody\u0026#34;: \u0026#34;The body of my article.\u0026#34;,\n    \u0026#34;articleSection\u0026#34;: \u0026#34;technology\u0026#34;,\n    \u0026#34;author\u0026#34;: \u0026#34;/people/1\u0026#34;,\n    \u0026#34;isFamilyFriendly\u0026#34;: true,\n    \u0026#34;datePublished\u0026#34;: \u0026#34;2015-05-11\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWe fixed it! By the way you learned how to work with relations. In a hypermedia API, every resource is identified with\nan unique IRI (an URL is an IRI). They are in the \u003ccode\u003e@id\u003c/code\u003e property of every JSON-LD document generated by the API and you\ncan use it as reference to set relations like we done in the previous snippet for the author property.\u003c/p\u003e\n\n\u003cp\u003eAPI Platform is smart enough to understand \u003ca href=\"http://php.net/manual/en/datetime.formats.date.php\"\u003eany date format supported by PHP\u003c/a\u003e\ndate functions. In production we recommend the format specified by the \u003ca href=\"http://tools.ietf.org/html/rfc3339\"\u003eRFC 3339\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe already have a powerful hypermedia REST API (always without writing a single line of PHP), but there is more.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOur API is auto-discoverable\u003c/strong\u003e. Open \u003ccode\u003ehttp://localhost:8000/apidoc\u003c/code\u003e and take a look at the content. Capabilities of the\nAPI are fully described in a machine-readable format: available resources, properties and operations, description of elements,\nreadable and writable properties, types returned and expected…\u003c/p\u003e\n\n\u003cp\u003eAs for errors, the whole API is described using \u003ca href=\"http://www.w3.org/ns/hydra/spec/latest/core/\"\u003ethe Hydra Core Vocabulary\u003c/a\u003e,\nan open web standard for describing hypermedia REST APIs in JSON-LD. Any Hydra-compliant client or library is able to interact\nwith the API without knowing anything about it! The most popular Hydra client is \u003ca href=\"http://www.markus-lanthaler.com/hydra/console/\"\u003eHydra Console\u003c/a\u003e.\nOpen an URL of the API with it you’ll get a nice management interface.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"images/console.png\" alt=\"Hydra console\"/\u003e]\u003c/p\u003e\n\n\u003cp\u003eYou can also give a try to the brand new \u003ca href=\"https://github.com/bergos/hydra-core\"\u003ehydra-core Javascript library\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eApiBundle offers a lot of other features including:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"../api-bundle/filters.jsonld\"\u003efilters\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../api-bundle/serialization-groups-and-relations.jsonld\"\u003eserialization groups and child resource embedding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../api-bundle/operations.jsonld\"\u003ecustom operations\u003c/a\u003e: deactivate\nsome methods, create custom operations, URL and controllers\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../api-bundle/data-providers.jsonld\"\u003edata providers\u003c/a\u003e: retrieve and\nmodify data trough a web-service or a MongoDB database or anything else instead of Doctrine ORM\u003c/li\u003e\n\u003cli\u003ea powerful \u003ca href=\"../api-bundle/the-event-system.jsonld\"\u003eevent system\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRead \u003ca href=\"../api-bundle/index.jsonld\"\u003eits dedicated documentation\u003c/a\u003e to see how to leverage them and how to\nhook your own code everywhere into it.\u003c/p\u003e\n\n\u003ch2\u003eSpecifying and testing the API\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"http://docs.behat.org/\"\u003eBehat\u003c/a\u003e (a \u003ca href=\"http://en.wikipedia.org/wiki/Behavior-driven_development\"\u003eBehavior-driven development\u003c/a\u003e\nframework) is pre-configured with contexts useful to spec and test REST API and JSON documents.\u003c/p\u003e\n\n\u003cp\u003eWith Behat, you can write the API specification (as user stories) in natural language then execute scenarios against the\napplication to validate its behavior.\u003c/p\u003e\n\n\u003cp\u003eCreate a \u003ca href=\"http://docs.behat.org/en/latest/guides/1.gherkin.html\"\u003eGherkin\u003c/a\u003e feature file containing the scenarios we run manually\nin the previous chapter:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-gherkin\"\u003eFeature: Blog\n  In order to post news\n  As a client software developer\n  I need to be able to retrieve, create, update and delete authors and posts trough the API.\n\n  # \u0026#34;@createSchema\u0026#34; creates a temporary SQLite database for testing the API\n  @createSchema\n  Scenario: Create a person\n    When I send a \u0026#34;POST\u0026#34; request to \u0026#34;/people\u0026#34; with body:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\u0026#34;name\u0026#34;: \u0026#34;Kévin\u0026#34;}\n    \u0026#34;\u0026#34;\u0026#34;\n    Then the response status code should be 201\n    And the response should be in JSON\n    And the header \u0026#34;Content-Type\u0026#34; should be equal to \u0026#34;application/ld+json\u0026#34;\n    And the JSON should be equal to:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;@context\u0026#34;: \u0026#34;/contexts/Person\u0026#34;,\n      \u0026#34;@id\u0026#34;: \u0026#34;/people/1\u0026#34;,\n      \u0026#34;@type\u0026#34;: \u0026#34;http://schema.org/Person\u0026#34;,\n      \u0026#34;name\u0026#34;: \u0026#34;Kévin\u0026#34;\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n\n  Scenario: Retrieve the user list\n    When I send a \u0026#34;GET\u0026#34; request to \u0026#34;/people\u0026#34;\n    Then the response status code should be 200\n    And the response should be in JSON\n    And the header \u0026#34;Content-Type\u0026#34; should be equal to \u0026#34;application/ld+json\u0026#34;\n    And the JSON should be equal to:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;@context\u0026#34;: \u0026#34;/contexts/Person\u0026#34;,\n      \u0026#34;@id\u0026#34;: \u0026#34;/people\u0026#34;,\n      \u0026#34;@type\u0026#34;: \u0026#34;hydra:PagedCollection\u0026#34;,\n      \u0026#34;hydra:totalItems\u0026#34;: 1,\n      \u0026#34;hydra:itemsPerPage\u0026#34;: 30,\n      \u0026#34;hydra:firstPage\u0026#34;: \u0026#34;/people\u0026#34;,\n      \u0026#34;hydra:lastPage\u0026#34;: \u0026#34;/people\u0026#34;,\n      \u0026#34;hydra:member\u0026#34;: [\n          {\n              \u0026#34;@id\u0026#34;: \u0026#34;/people/1\u0026#34;,\n              \u0026#34;@type\u0026#34;: \u0026#34;http://schema.org/Person\u0026#34;,\n              \u0026#34;name\u0026#34;: \u0026#34;Kévin\u0026#34;\n          }\n      ]\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n\n  Scenario: Throw errors when a post is invalid\n    When I send a \u0026#34;POST\u0026#34; request to \u0026#34;/blog_postings\u0026#34; with body:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n        \u0026#34;name\u0026#34;: \u0026#34;API Platform is great\u0026#34;,\n        \u0026#34;headline\u0026#34;: \u0026#34;You\u0026#39;ll that framework!\u0026#34;,\n        \u0026#34;articleBody\u0026#34;: \u0026#34;The body of my article.\u0026#34;,\n        \u0026#34;articleSection\u0026#34;: \u0026#34;technology\u0026#34;,\n        \u0026#34;author\u0026#34;: \u0026#34;/people/1\u0026#34;,\n        \u0026#34;isFamilyFriendly\u0026#34;: \u0026#34;maybe\u0026#34;,\n        \u0026#34;datePublished\u0026#34;: \u0026#34;2015-05-11\u0026#34;\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n    Then the response status code should be 400\n    And the response should be in JSON\n    And the header \u0026#34;Content-Type\u0026#34; should be equal to \u0026#34;application/ld+json\u0026#34;\n    And the JSON should be equal to:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n        \u0026#34;@context\u0026#34;: \u0026#34;/contexts/ConstraintViolationList\u0026#34;,\n        \u0026#34;@type\u0026#34;: \u0026#34;ConstraintViolationList\u0026#34;,\n        \u0026#34;hydra:title\u0026#34;: \u0026#34;An error occurred\u0026#34;,\n        \u0026#34;hydra:description\u0026#34;: \u0026#34;isFamilyFriendly: This value should be of type boolean.\\n\u0026#34;,\n        \u0026#34;violations\u0026#34;: [\n            {\n                \u0026#34;propertyPath\u0026#34;: \u0026#34;isFamilyFriendly\u0026#34;,\n                \u0026#34;message\u0026#34;: \u0026#34;This value should be of type boolean.\u0026#34;\n            }\n        ]\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n\n  # \u0026#34;@dropSchema\u0026#34; is mandatory to cleanup the temporary database on the last scenario\n  @dropSchema\n  Scenario: Post a new blog post\n    When I send a \u0026#34;POST\u0026#34; request to \u0026#34;/blog_postings\u0026#34; with body:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n        \u0026#34;name\u0026#34;: \u0026#34;API Platform is great\u0026#34;,\n        \u0026#34;headline\u0026#34;: \u0026#34;You\u0026#39;ll that framework!\u0026#34;,\n        \u0026#34;articleBody\u0026#34;: \u0026#34;The body of my article.\u0026#34;,\n        \u0026#34;articleSection\u0026#34;: \u0026#34;technology\u0026#34;,\n        \u0026#34;author\u0026#34;: \u0026#34;/people/1\u0026#34;,\n        \u0026#34;isFamilyFriendly\u0026#34;: true,\n        \u0026#34;datePublished\u0026#34;: \u0026#34;2015-05-11\u0026#34;\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n    Then the response status code should be 201\n    And the response should be in JSON\n    And the header \u0026#34;Content-Type\u0026#34; should be equal to \u0026#34;application/ld+json\u0026#34;\n    And print last JSON response\n    And the JSON should be equal to:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;@context\u0026#34;: \u0026#34;/contexts/BlogPosting\u0026#34;,\n      \u0026#34;@id\u0026#34;: \u0026#34;/blog_postings/1\u0026#34;,\n      \u0026#34;@type\u0026#34;: \u0026#34;http://schema.org/BlogPosting\u0026#34;,\n      \u0026#34;articleBody\u0026#34;: \u0026#34;The body of my article.\u0026#34;,\n      \u0026#34;articleSection\u0026#34;: \u0026#34;technology\u0026#34;,\n      \u0026#34;author\u0026#34;: \u0026#34;/people/1\u0026#34;,\n      \u0026#34;datePublished\u0026#34;: \u0026#34;2015-05-11T00:00:00+02:00\u0026#34;,\n      \u0026#34;headline\u0026#34;: \u0026#34;You\u0026#39;ll that framework!\u0026#34;,\n      \u0026#34;isFamilyFriendly\u0026#34;: true,\n      \u0026#34;name\u0026#34;: \u0026#34;API Platform is great\u0026#34;\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe API Platform flavor of Behat also comes with a temporary SQLite database dedicated to tests. It works out of the box.\u003c/p\u003e\n\n\u003cp\u003eJust run \u003ccode\u003ebin/behat\u003c/code\u003e. Everything should be green:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e4 scenarios (4 passed)\n21 steps (21 passed)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen you get a powerful hypermedia API exposing structured data, specified and tested thanks to Behat. And still without\na line of PHP!\u003c/p\u003e\n\n\u003cp\u003eIt’s incredibly useful for prototyping and Rapid Application Development (RAD). But the framework is designed to run in prod.\nIt benefits from \u003cstrong\u003estrong extension points\u003c/strong\u003e and is \u003cstrong\u003ehas been optimized for very high-traffic websites\u003c/strong\u003e (API Platform\npowers the new version of a major world-wide media site).\u003c/p\u003e\n\n\u003ch2\u003eOther features\u003c/h2\u003e\n\n\u003cp\u003eAPI Platform has a lot of other features and can extended with PHP libraries and Symfony bundles. \u003ca href=\"https://twitter.com/ApiPlatform\"\u003eStay tuned\u003c/a\u003e,\nmore documentation and cookbooks are coming!\u003c/p\u003e\n\n\u003cp\u003eHere is a non exhaustive list of what you can do with API Platform:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd \u003ca href=\"../api-bundle/fosuser-bundle.jsonld\"\u003ea user management system\u003c/a\u003e\n(FOSUser integration)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/lexik/LexikJWTAuthenticationBundle\"\u003eSecure the API with JWT\u003c/a\u003e (LexikJwtAuthenticationBundle) or \u003ca href=\"https://github.com/FriendsOfSymfony/FOSOAuthServerBundle\"\u003eOAuth\u003c/a\u003e\n(FosOAuthServer)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://foshttpcachebundle.readthedocs.org\"\u003eAdd a Varnish reverse proxy and adopt a expiration or invalidation HTTP cache strategy\u003c/a\u003e\n(FosHttpCache)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/dunglas/DunglasAngularCsrfBundle\"\u003eAdd CSRF protection when the API authentication relies on cookies\u003c/a\u003e\n(DunglasAngularCsrfBundle – you should prefer using a stateless authentication mode such as a JWT token stored in the\nbrowser session storage when possible)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://symfony.com/doc/current/cookbook/email/email.html\"\u003eSend mails\u003c/a\u003e (Swift Mailer)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../deployment/index.jsonld\"\u003eDeploy\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe next step? \u003ca href=\"angularjs.jsonld\"\u003eLearn how to create an AngularJS client for the API\u003c/a\u003e.\u003c/p\u003e\n","author":[{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Stepan Anchugov","email":"kixxx1@gmail.com"},{"@type":"Person","Name":"Lukas Kahwe Smith","email":"smith@pooteeweet.org"},{"@type":"Person","Name":"Lukas Kahwe Smith","email":"smith@pooteeweet.org"},{"@type":"Person","Name":"Lukas Kahwe Smith","email":"smith@pooteeweet.org"},{"@type":"Person","Name":"Darren Black","email":"dblack@totaltrash.net"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Alexis Degrugillier","email":"alexis.degrugillier@stadline.com"}],"dateCreated":"2015-06-29T16:19:03+02:00","dateModified":"2016-04-28T11:30:29+02:00"}