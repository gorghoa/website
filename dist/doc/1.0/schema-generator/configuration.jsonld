{"@context":"http://schema.org","@type":"CreativeWork","name":"Configuration","text":"\u003ch1\u003eConfiguration\u003c/h1\u003e\n\n\u003cp\u003eThe following options can be used in the configuration file.\u003c/p\u003e\n\n\u003ch2\u003eCustomizing PHP namespaces\u003c/h2\u003e\n\n\u003cp\u003eNamespaces of generated PHP classes can be set globally, respectively for entities, enumerations and interfaces (if used\nwith Doctrine Resolve Target Entity Listener option).\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003enamespaces:\n  entity:               \u0026#34;Dunglas\\EcommerceBundle\\Entity\u0026#34;\n  enum:                 \u0026#34;Dunglas\\EcommerceBundle\\Enum\u0026#34;\n  interface:            \u0026#34;Dunglas\\EcommerceBundle\\Model\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNamespaces can also be specified for a specific type. It will take precedence over any globally configured namespace.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003etypes:\n  Thing:\n    namespaces:\n      class: \u0026#34;Dunglas\\CoreBundle\\Entity\u0026#34; # Namespace for the Thing entity (works for enumerations too)\n      interface: \u0026#34;Schema\\Model\u0026#34; # Namespace of the related interface\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eForcing a field range\u003c/h2\u003e\n\n\u003cp\u003eSchema.org allows a property to have several types. However, the generator allows only one type by property. If not configured,\nit will use the first defined type.\nThe \u003ccode\u003erange\u003c/code\u003e option is useful to set the type of a given property. It can also be used to force a type (even if not in the\nSchema.org definition).\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003etypes:\n  Brand:\n    properties:\n      logo: { range: \u0026#34;ImageObject\u0026#34; } # Force the range of the logo propery to ImageObject (can also be URL according to Schema.org)\n\n  PostalAddress:\n    properties:\n      addressCountry: { range: \u0026#34;Text\u0026#34; } # Force the type to Text instead of Country\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eForcing a field cardinality\u003c/h2\u003e\n\n\u003cp\u003eThe cardinality of a property is automatically guessed. The \u003ccode\u003ecardinality\u003c/code\u003e option allows to override the guessed value.\nSupported cardinalities are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e(0..1)\u003c/code\u003e: scalar, not required\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e(0..*)\u003c/code\u003e: array, not required\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e(1..1)\u003c/code\u003e: scalar, required\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e(1..*)\u003c/code\u003e: array, required\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eCardinalities are enforced by the class generator, the Doctrine ORM generator and the Symfony validation generator.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003etypes:\n  Product:\n    properties:\n      sku:\n        cardinality: \u0026#34;(0..1)\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eForcing a relation table name\u003c/h2\u003e\n\n\u003cp\u003eThe relation table name between two entities is automatically guessed by Doctrine. The \u003ccode\u003erelationTableName\u003c/code\u003e option allows\nto override the default value.\u003c/p\u003e\n\n\u003cp\u003eThis is useful when you need two entities to have more than one relation.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e  Organization:\n    properties:\n      contactPoint: { range: Person, relationTableName: organization_contactPoint }\n      member: { range: Person, cardinality: (1..*) } ## Will be default value : organization_person\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eForcing (or disabling) a class parent\u003c/h2\u003e\n\n\u003cp\u003eOverride the guessed class hierarchy of a given type with this option.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e  ImageObject:\n    parent: Thing # Force the parent to be Thing instead of CreativeWork \u0026gt; MediaObject\n    properties: ~\n  Drug:\n    parent: false # No parent\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eForcing a class to be abstract\u003c/h2\u003e\n\n\u003cp\u003eForce a class to be \u003ccode\u003eabstract\u003c/code\u003e (or to be not).\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e   Person:\n     abstract: true\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eForcing an embeddable class to be embedded\u003c/h2\u003e\n\n\u003cp\u003eForce an \u003ccode\u003eembeddable\u003c/code\u003e class to be \u003ccode\u003eembedded\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e   GeoCoordinates:\n     embeddable: true\n   Place:\n     coordinates: { range: \u0026#34;GeoCoordinates\u0026#34;, embedded: true, columnPrefix: false }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eAuthor PHPDoc\u003c/h2\u003e\n\n\u003cp\u003eAdd a \u003ccode\u003e@author\u003c/code\u003e PHPDoc annotation to class’ DocBlock.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eauthor: \u0026#34;Kévin Dunglas \u0026lt;kevin@les-tilleuls.coop\u0026gt;\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eDisabling generators and creating custom ones\u003c/h2\u003e\n\n\u003cp\u003eBy default, all generators except the \u003ccode\u003eDunglasJsonLdApi\u003c/code\u003e one are enabled. You can specify the list of generators to use\nwith the \u003ccode\u003egenerators\u003c/code\u003e option.\u003c/p\u003e\n\n\u003cp\u003eExample (enabling only the PHPDoc generator):\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eannotationGenerators:\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\PhpDocAnnotationGenerator\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou can write your generators by implementing the \u003ccode\u003eAnnotationGeneratorInterface\u003c/code\u003e.\nThe \u003ccode\u003eAbstractAnnotationGenerator\u003c/code\u003e provides helper methods\nuseful when creating your own generators.\u003c/p\u003e\n\n\u003cp\u003eEnabling a custom generator and the PHPDoc generator:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eannotationGenerators:\n  - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\PhpDocAnnotationGenerator\n  - Acme\\Generators\\MyGenerator\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eDisabling \u003ccode\u003eid\u003c/code\u003e generator\u003c/h2\u003e\n\n\u003cp\u003eBy default, the generator add a property called \u003ccode\u003eid\u003c/code\u003e not provided by Schema.org. This useful when using generated entity\nwith an ORM or an ODM.\nThis behavior can be disabled with the following setting:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003egenerateId: false\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eDisabling usage of Doctrine collection\u003c/h2\u003e\n\n\u003cp\u003eBy default, the generator use classes provided by the \u003ca href=\"https://github.com/doctrine/collections\"\u003eDoctrine Collections\u003c/a\u003e library\nto store collections of entities. This is useful (and required) when using Doctrine ORM or Doctrine ODM.\nThis behavior can be disabled (to fallback to standard arrays) with the following setting:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003edoctrine:\n  useCollection: false\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eCustom field visibility\u003c/h2\u003e\n\n\u003cp\u003eGenerated fields have a \u003ccode\u003eprivate\u003c/code\u003e visibility and are exposed through getters and setters.\nThe default visibility can be changed with the \u003ccode\u003efieldVisibility\u003c/code\u003e otion.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003efieldVisibility: \u0026#34;protected\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eForcing Doctrine inheritance mapping annotation\u003c/h2\u003e\n\n\u003cp\u003eThe standard behavior of the generator is to use the \u003ccode\u003e@MappedSuperclass\u003c/code\u003e Doctrine annotation for classes with children and\n\u003ccode\u003e@Entity\u003c/code\u003e for classes with no child.\u003c/p\u003e\n\n\u003cp\u003eThe inheritance annotation can be forced for a given type like the following:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003etypes:\n  Product:\n    doctrine:\n      inheritanceMapping: \u0026#34;@MappedSuperclass\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cem\u003eThis setting is only relevant when using the Doctrine ORM generator.\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eInterfaces and Doctrine Resolve Target Entity Listener\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"http://doctrine-orm.readthedocs.org/en/latest/cookbook/resolve-target-entity-listener.html\"\u003e\u003ccode\u003eResolveTargetEntityListener\u003c/code\u003e\u003c/a\u003e\nis a feature of Doctrine to keep modules independent. It allows to specify interfaces and \u003ccode\u003eabstract\u003c/code\u003e classes in relation\nmappings.\u003c/p\u003e\n\n\u003cp\u003eIf you set the option \u003ccode\u003euseInterface\u003c/code\u003e to true, the generator will generate an interface corresponding to each generated\nentity and will use them in relation mappings.\u003c/p\u003e\n\n\u003cp\u003eTo let PHP Schema generating the XML mapping file usable with Symfony add the following to your config file:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003edoctrine:\n  resolveTargetEntityConfigPath: path/to/doctrine.xml\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eCustom schemas\u003c/h2\u003e\n\n\u003cp\u003eThe generator can use your own schema definitions. They must be wrote in RDFa and follow the format of the \u003ca href=\"http://schema.org/docs/schema_org_rdfa.html\"\u003eSchema.org’s\ndefinition\u003c/a\u003e. This is useful to document your \u003ca href=\"http://schema.org/docs/extension.html\"\u003eSchema.org extensions\u003c/a\u003e and use them\nto generate the PHP data model of your application.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003erdfa:\n    -\n        uri: https://raw.githubusercontent.com/rvguha/schemaorg/master/data/schema.rdfa # Experimental version of Schema.org\n        format: rdfa # Optional document type\n    -\n        uri: http://example.com/data/myschema.rfa # Additional types\n        format: ~\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cem\u003eFormat is optional but you can specify it if it can’t be guessed, got or if it is wrong from the HTTP headers or from the file.\u003c/em\u003e\n\u003cem\u003eSupport for other namespaces than \u003ccode\u003ehttp://schema.org\u003c/code\u003e is planned for future versions but not currently available.\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eChecking GoodRelation compatibility\u003c/h2\u003e\n\n\u003cp\u003eIf the \u003ccode\u003echeckIsGoodRelations\u003c/code\u003e option is set to \u003ccode\u003etrue\u003c/code\u003e, the generator will emit a warning if an encountered property is not\npar of the \u003ca href=\"http://www.heppnetz.de/projects/goodrelations/\"\u003eGoodRelations\u003c/a\u003e schema.\u003c/p\u003e\n\n\u003cp\u003eThis is useful when generating e-commerce data model.\u003c/p\u003e\n\n\u003ch2\u003ePHP file header\u003c/h2\u003e\n\n\u003cp\u003ePrepend all generated PHP files with a custom comment.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eheader: |\n  /*\n   * This file is part of the Ecommerce package.\n   *\n   * (c) Kévin Dunglas \u0026lt;dunglas@gmail.com\u0026gt;\n   *\n   * For the full copyright and license information, please view the LICENSE\n   * file that was distributed with this source code.\n   */\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eFull configuration reference\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# RDFa files to use\nrdfa:\n\n    # Default:\n    -\n        uri: http://schema.org/docs/schema_org_rdfa.html\n        format: ~\n\n# OWL relation files to use\nrelations:\n\n    # Default:\n    - http://purl.org/goodrelations/v1.owl\n\n# Debug mode\ndebug:                false\n\n# Automatically add an id field to entities\ngenerateId:           true\n\n# Generate interfaces and use Doctrine\u0026#39;s Resolve Target Entity feature\nuseInterface:         false\n\n# Emit a warning if a property is not derived from GoodRelations\ncheckIsGoodRelations:  false\n\n# A license or any text to use as header of generated files\nheader:               false # Example: // (c) Kévin Dunglas \u0026lt;dunglas@gmail.com\u0026gt;\n\n# PHP namespaces\nnamespaces:\n\n    # The namespace of the generated entities\n    entity:               SchemaOrg\\Entity # Example: Acme\\Entity\n\n    # The namespace of the generated enumerations\n    enum:                 SchemaOrg\\Enum # Example: Acme\\Enum\n\n    # The namespace of the generated interfaces\n    interface:            SchemaOrg\\Model # Example: Acme\\Model\n\n# Doctrine\ndoctrine:\n\n    # Use Doctrine\u0026#39;s ArrayCollection instead of standard arrays\n    useCollection:        true\n\n    # The Resolve Target Entity Listener config file pass\n    resolveTargetEntityConfigPath:  null\n\n# The value of the phpDoc\u0026#39;s @author annotation\nauthor:               false # Example: Kévin Dunglas \u0026lt;dunglas@gmail.com\u0026gt;\n\n# Visibility of entities fields\nfieldVisibility:      ~ # One of \u0026#34;private\u0026#34;; \u0026#34;protected\u0026#34;; \u0026#34;public\u0026#34;\n\n# Schema.org\u0026#39;s types to use\ntypes:\n\n    # Prototype\n    id:\n\n        # Type namespaces\n        namespaces:\n\n            # The namespace for the generated class (override any other defined namespace)\n            class:                null\n\n            # The namespace for the generated interface (override any other defined namespace)\n            interface:            null\n        doctrine:\n\n            # The Doctrine inheritance mapping type (override the guessed one)\n            inheritanceMapping:   null\n\n        # The parent class, set to false for a top level class\n        parent:               null\n\n        # If the class is embeddable, set to true for an embeddable class\n        embeddable:           false\n\n        # Properties of this type to use\n        properties:\n\n            # Prototype\n            id:\n\n                # The property range\n                range:                null # Example: Offer\n                cardinality:          ~ # One of \u0026#34;(0..1)\u0026#34;; \u0026#34;(0..*)\u0026#34;; \u0026#34;(1..1)\u0026#34;; \u0026#34;(1..*)\u0026#34;; \u0026#34;unknown\u0026#34;\n                embedded:             false # true if field is an embedded class\n                columnPrefix:         false # true if embedded columns should be named with prefix\n\n# Annotation generators to use\nannotationGenerators:\n\n    # Defaults:\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\PhpDocAnnotationGenerator\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\ConstraintAnnotationGenerator\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\DoctrineOrmAnnotationGenerator\n\u003c/code\u003e\u003c/pre\u003e\n","author":[{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Stepan Anchugov","email":"kixxx1@gmail.com"},{"@type":"Person","Name":"Gu3","email":"vincent.guffon@gmail.com"},{"@type":"Person","Name":"JhonnyL","email":"jhonny.lidfors@chas.se"},{"@type":"Person","Name":"meyerbaptiste","email":"baptiste@les-tilleuls.coop"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"}],"dateCreated":"2015-09-04T12:59:28+02:00","dateModified":"2016-05-03T09:59:09+02:00"}