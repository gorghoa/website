{"@context":"http://schema.org","@type":"CreativeWork","name":"Usage","text":"\u003ch1\u003eUsage\u003c/h1\u003e\n\n\u003ch2\u003eInstallation\u003c/h2\u003e\n\n\u003cp\u003eUse \u003ca href=\"http://getcomposer.org\"\u003eComposer\u003c/a\u003e to install the generator. In standalone mode:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ecomposer create-project api-platform/schema-generator\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eOr directly as a development dependency of your project:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ecomposer require --dev api-platform/schema-generator\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIf you want to create an API exposing Schema.org types, take a look at \u003ca href=\"https://api-platform.com\"\u003eAPI platform\u003c/a\u003e,\na all-in-one skeleton including PHP Schema and integrated with a ton of other useful packages allowing to generate JSON-LD\nREST API in minutes.\u003c/p\u003e\n\n\u003ch2\u003eModel scaffolding\u003c/h2\u003e\n\n\u003cp\u003eStart by browsing \u003ca href=\"http://schema.org\"\u003eSchema.org\u003c/a\u003e and pick types applicable to your application. The website provides\ntons of schemas including (but not limited to) representations of people, organization, event, postal address, creative\nwork and e-commerce structures.\nThen, write a simple YAML config file like the following (here we will generate a data model for an address book):\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eaddress-book.yml\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003erdfa:\n -\n   uri: tests/data/schema.rdfa\n   format: ~\nrelations:\n - tests/data/v1.owl\n# The PHP namespace of generated entities\nnamespaces:\n  entity: \u0026#34;AddressBook\\Entity\u0026#34;\n# The list of types and properties we want to use\ntypes:\n  # Parent class of Person\n  Thing:\n    properties:\n      name: ~\n  Person:\n    properties:\n      familyName: ~\n      givenName: ~\n      additionalName: ~\n      gender: ~\n      address: ~\n      birthDate: ~\n      telephone: ~\n      email: ~\n      url: ~\n      jobTitle: ~\n  PostalAddress:\n    # Disable the generation of the class hierarchy for this type\n    parent: false\n    properties:\n      # Force the type of the addressCountry property to text\n      addressCountry: { range: \u0026#34;Text\u0026#34; }\n      addressLocality: ~\n      addressRegion: ~\n      postOfficeBoxNumber: ~\n      postalCode: ~\n      streetAddress: ~\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eRun the generator with this config file as parameter:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ebin/schema generate-types output-directory/ address-book.yml\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe following classes will be generated:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eoutput-directory/AddressBook/Entity/Thing.php\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n\nnamespace AddressBook\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * The most generic type of item.\n *\n * @see http://schema.org/Thing Documentation on Schema.org\n *\n * @ORM\\MappedSuperclass\n */\nabstract class Thing\n{\n    /**\n     * @var string $name The name of the item.\n     * @Assert\\Type(type=\u0026#34;string\u0026#34;)\n     * @ORM\\Column(nullable=true)\n     */\n    private $name;\n\n    /**\n     * Sets name.\n     *\n     * @param  string $name\n     * @return $this\n     */\n    public function setName($name)\n    {\n        $this-\u0026gt;name = $name;\n\n        return $this;\n    }\n\n    /**\n     * Gets name.\n     *\n     * @return string\n     */\n    public function getName()\n    {\n        return $this-\u0026gt;name;\n    }\n}\n\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003ccode\u003eoutput-directory/AddressBook/Entity/Person.php\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n\nnamespace AddressBook\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * A person (alive, dead, undead, or fictional).\n *\n * @see http://schema.org/Person Documentation on Schema.org\n *\n * @ORM\\Entity\n */\nclass Person extends Thing\n{\n    /**\n     * @var integer\n     * @ORM\\Column(type=\u0026#34;integer\u0026#34;)\n     * @ORM\\Id\n     * @ORM\\GeneratedValue(strategy=\u0026#34;AUTO\u0026#34;)\n     */\n    private $id;\n    /**\n     * @var string An additional name for a Person, can be used for a middle name.\n     * @Assert\\Type(type=\u0026#34;string\u0026#34;)\n     * @ORM\\Column(nullable=true)\n     */\n    private $additionalName;\n    /**\n     * @var PostalAddress Physical address of the item.\n     * @ORM\\ManyToOne(targetEntity=\u0026#34;PostalAddress\u0026#34;)\n     */\n    private $address;\n    /**\n     * @var \\DateTime Date of birth.\n     * @Assert\\Date\n     * @ORM\\Column(type=\u0026#34;date\u0026#34;, nullable=true)\n     */\n    private $birthDate;\n    /**\n     * @var string Email address.\n     * @Assert\\Email\n     * @ORM\\Column(nullable=true)\n     */\n    private $email;\n    /**\n     * @var string Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property.\n     * @Assert\\Type(type=\u0026#34;string\u0026#34;)\n     * @ORM\\Column(nullable=true)\n     */\n    private $familyName;\n    /**\n     * @var string Gender of the person.\n     * @Assert\\Type(type=\u0026#34;string\u0026#34;)\n     * @ORM\\Column(nullable=true)\n     */\n    private $gender;\n    /**\n     * @var string Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property.\n     * @Assert\\Type(type=\u0026#34;string\u0026#34;)\n     * @ORM\\Column(nullable=true)\n     */\n    private $givenName;\n    /**\n     * @var string The job title of the person (for example, Financial Manager).\n     * @Assert\\Type(type=\u0026#34;string\u0026#34;)\n     * @ORM\\Column(nullable=true)\n     */\n    private $jobTitle;\n    /**\n     * @var string The telephone number.\n     * @Assert\\Type(type=\u0026#34;string\u0026#34;)\n     * @ORM\\Column(nullable=true)\n     */\n    private $telephone;\n\n    /**\n     * Sets id.\n     *\n     * @param  integer $id\n     * @return $this\n     */\n    public function setId($id)\n    {\n        $this-\u0026gt;id = $id;\n\n        return $this;\n    }\n\n    /**\n     * Gets id.\n     *\n     * @return integer\n     */\n    public function getId()\n    {\n        return $this-\u0026gt;id;\n    }\n\n    /**\n     * Sets additionalName.\n     *\n     * @param  string $additionalName\n     * @return $this\n     */\n    public function setAdditionalName($additionalName)\n    {\n        $this-\u0026gt;additionalName = $additionalName;\n\n        return $this;\n    }\n\n    /**\n     * Gets additionalName.\n     *\n     * @return string\n     */\n    public function getAdditionalName()\n    {\n        return $this-\u0026gt;additionalName;\n    }\n\n    /**\n     * Sets address.\n     *\n     * @param  PostalAddress $address\n     * @return $this\n     */\n    public function setAddress(PostalAddress $address)\n    {\n        $this-\u0026gt;address = $address;\n\n        return $this;\n    }\n\n    /**\n     * Gets address.\n     *\n     * @return PostalAddress\n     */\n    public function getAddress()\n    {\n        return $this-\u0026gt;address;\n    }\n\n    /**\n     * Sets birthDate.\n     *\n     * @param  \\DateTime $birthDate\n     * @return $this\n     */\n    public function setBirthDate(\\DateTime $birthDate)\n    {\n        $this-\u0026gt;birthDate = $birthDate;\n\n        return $this;\n    }\n\n    /**\n     * Gets birthDate.\n     *\n     * @return \\DateTime\n     */\n    public function getBirthDate()\n    {\n        return $this-\u0026gt;birthDate;\n    }\n\n    /**\n     * Sets email.\n     *\n     * @param  string $email\n     * @return $this\n     */\n    public function setEmail($email)\n    {\n        $this-\u0026gt;email = $email;\n\n        return $this;\n    }\n\n    /**\n     * Gets email.\n     *\n     * @return string\n     */\n    public function getEmail()\n    {\n        return $this-\u0026gt;email;\n    }\n\n    /**\n     * Sets familyName.\n     *\n     * @param  string $familyName\n     * @return $this\n     */\n    public function setFamilyName($familyName)\n    {\n        $this-\u0026gt;familyName = $familyName;\n\n        return $this;\n    }\n\n    /**\n     * Gets familyName.\n     *\n     * @return string\n     */\n    public function getFamilyName()\n    {\n        return $this-\u0026gt;familyName;\n    }\n\n    /**\n     * Sets gender.\n     *\n     * @param  string $gender\n     * @return $this\n     */\n    public function setGender($gender)\n    {\n        $this-\u0026gt;gender = $gender;\n\n        return $this;\n    }\n\n    /**\n     * Gets gender.\n     *\n     * @return string\n     */\n    public function getGender()\n    {\n        return $this-\u0026gt;gender;\n    }\n\n    /**\n     * Sets givenName.\n     *\n     * @param  string $givenName\n     * @return $this\n     */\n    public function setGivenName($givenName)\n    {\n        $this-\u0026gt;givenName = $givenName;\n\n        return $this;\n    }\n\n    /**\n     * Gets givenName.\n     *\n     * @return string\n     */\n    public function getGivenName()\n    {\n        return $this-\u0026gt;givenName;\n    }\n\n    /**\n     * Sets jobTitle.\n     *\n     * @param  string $jobTitle\n     * @return $this\n     */\n    public function setJobTitle($jobTitle)\n    {\n        $this-\u0026gt;jobTitle = $jobTitle;\n\n        return $this;\n    }\n\n    /**\n     * Gets jobTitle.\n     *\n     * @return string\n     */\n    public function getJobTitle()\n    {\n        return $this-\u0026gt;jobTitle;\n    }\n\n    /**\n     * Sets telephone.\n     *\n     * @param  string $telephone\n     * @return $this\n     */\n    public function setTelephone($telephone)\n    {\n        $this-\u0026gt;telephone = $telephone;\n\n        return $this;\n    }\n\n    /**\n     * Gets telephone.\n     *\n     * @return string\n     */\n    public function getTelephone()\n    {\n        return $this-\u0026gt;telephone;\n    }\n}\n\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003ccode\u003eoutput-directory/AddressBook/Entity/PostalAddress.php\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n\nnamespace AddressBook\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * The mailing address.\n *\n * @see http://schema.org/PostalAddress Documentation on Schema.org\n *\n * @ORM\\Entity\n */\nclass PostalAddress\n{\n    /**\n     * @var integer\n     * @ORM\\Column(type=\u0026#34;integer\u0026#34;)\n     * @ORM\\Id\n     * @ORM\\GeneratedValue(strategy=\u0026#34;AUTO\u0026#34;)\n     */\n    private $id;\n    /**\n     * @var string The country. For example, USA. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1).\n     * @Assert\\Type(type=\u0026#34;string\u0026#34;)\n     * @ORM\\Column(nullable=true)\n     */\n    private $addressCountry;\n    /**\n     * @var string The locality. For example, Mountain View.\n     * @Assert\\Type(type=\u0026#34;string\u0026#34;)\n     * @ORM\\Column(nullable=true)\n     */\n    private $addressLocality;\n    /**\n     * @var string The region. For example, CA.\n     * @Assert\\Type(type=\u0026#34;string\u0026#34;)\n     * @ORM\\Column(nullable=true)\n     */\n    private $addressRegion;\n    /**\n     * @var string The postal code. For example, 94043.\n     * @Assert\\Type(type=\u0026#34;string\u0026#34;)\n     * @ORM\\Column(nullable=true)\n     */\n    private $postalCode;\n    /**\n     * @var string $postOfficeBoxNumber The post office box number for PO box addresses.\n     * @Assert\\Type(type=\u0026#34;string\u0026#34;)\n     * @ORM\\Column(nullable=true)\n     */\n    private $postOfficeBoxNumber;\n    /**\n     * @var string The street address. For example, 1600 Amphitheatre Pkwy.\n     * @Assert\\Type(type=\u0026#34;string\u0026#34;)\n     * @ORM\\Column(nullable=true)\n     */\n    private $streetAddress;\n\n    /**\n     * Sets id.\n     *\n     * @param  integer $id\n     * @return $this\n     */\n    public function setId($id)\n    {\n        $this-\u0026gt;id = $id;\n\n        return $this;\n    }\n\n    /**\n     * Gets id.\n     *\n     * @return integer\n     */\n    public function getId()\n    {\n        return $this-\u0026gt;id;\n    }\n\n    /**\n     * Sets addressCountry.\n     *\n     * @param  string $addressCountry\n     * @return $this\n     */\n    public function setAddressCountry($addressCountry)\n    {\n        $this-\u0026gt;addressCountry = $addressCountry;\n\n        return $this;\n    }\n\n    /**\n     * Gets addressCountry.\n     *\n     * @return string\n     */\n    public function getAddressCountry()\n    {\n        return $this-\u0026gt;addressCountry;\n    }\n\n    /**\n     * Sets addressLocality.\n     *\n     * @param  string $addressLocality\n     * @return $this\n     */\n    public function setAddressLocality($addressLocality)\n    {\n        $this-\u0026gt;addressLocality = $addressLocality;\n\n        return $this;\n    }\n\n    /**\n     * Gets addressLocality.\n     *\n     * @return string\n     */\n    public function getAddressLocality()\n    {\n        return $this-\u0026gt;addressLocality;\n    }\n\n    /**\n     * Sets addressRegion.\n     *\n     * @param  string $addressRegion\n     * @return $this\n     */\n    public function setAddressRegion($addressRegion)\n    {\n        $this-\u0026gt;addressRegion = $addressRegion;\n\n        return $this;\n    }\n\n    /**\n     * Gets addressRegion.\n     *\n     * @return string\n     */\n    public function getAddressRegion()\n    {\n        return $this-\u0026gt;addressRegion;\n    }\n\n    /**\n     * Sets postalCode.\n     *\n     * @param  string $postalCode\n     * @return $this\n     */\n    public function setPostalCode($postalCode)\n    {\n        $this-\u0026gt;postalCode = $postalCode;\n\n        return $this;\n    }\n\n    /**\n     * Gets postalCode.\n     *\n     * @return string\n     */\n    public function getPostalCode()\n    {\n        return $this-\u0026gt;postalCode;\n    }\n\n    /**\n     * Sets postOfficeBoxNumber.\n     *\n     * @param  string $postOfficeBoxNumber\n     * @return $this\n     */\n    public function setPostOfficeBoxNumber($postOfficeBoxNumber)\n    {\n        $this-\u0026gt;postOfficeBoxNumber = $postOfficeBoxNumber;\n\n        return $this;\n    }\n\n    /**\n     * Gets postOfficeBoxNumber.\n     *\n     * @return string\n     */\n    public function getPostOfficeBoxNumber()\n    {\n        return $this-\u0026gt;postOfficeBoxNumber;\n    }\n\n    /**\n     * Sets streetAddress.\n     *\n     * @param  string $streetAddress\n     * @return $this\n     */\n    public function setStreetAddress($streetAddress)\n    {\n        $this-\u0026gt;streetAddress = $streetAddress;\n\n        return $this;\n    }\n\n    /**\n     * Gets streetAddress.\n     *\n     * @return string\n     */\n    public function getStreetAddress()\n    {\n        return $this-\u0026gt;streetAddress;\n    }\n}\n\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNote that the generator take care of creating directories corresponding to the namespace structure.\u003c/p\u003e\n\n\u003cp\u003eWithout configuration file, the tool will build the entire Schema.org vocabulary. If no properties are specified for a given\ntype, all its properties will be generated.\u003c/p\u003e\n\n\u003cp\u003eThe generator also support enumerations generation. For subclasses of \u003ca href=\"https://schema.org/Enumeration\"\u003e\u003ccode\u003eEnumeration\u003c/code\u003e\u003c/a\u003e, the\ngenerator will automatically create a class extending the Enum type provided by \u003ca href=\"https://github.com/myclabs/php-enum\"\u003emyclabs/php-enum\u003c/a\u003e.\nDon’t forget to install this library in your project. Refer you to PHP Enum documentation to see how to use it. The Symfony\nvalidation annotation generator automatically takes care of enumerations to validate choices values.\u003c/p\u003e\n\n\u003cp\u003eA config file generating an enum class:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003etypes:\n  OfferItemCondition: ~ # The generator will automatically guess that OfferItemCondition is subclass of Enum\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe associated PHP class:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n\nnamespace SchemaOrg\\Enum;\n\nuse MyCLabs\\Enum\\Enum;\n\n/**\n * A list of possible conditions for the item.\n *\n * @see http://schema.org/OfferItemCondition Documentation on Schema.org\n */\nclass OfferItemCondition extends Enum\n{\n    /**\n     * @var string DamagedCondition\n     */\n    const DAMAGED_CONDITION = \u0026#39;http://schema.org/DamagedCondition\u0026#39;;\n    /**\n     * @var string NewCondition\n     */\n    const NEW_CONDITION = \u0026#39;http://schema.org/NewCondition\u0026#39;;\n    /**\n     * @var string RefurbishedCondition\n     */\n    const REFURBISHED_CONDITION = \u0026#39;http://schema.org/RefurbishedCondition\u0026#39;;\n    /**\n     * @var string UsedCondition\n     */\n    const USED_CONDITION = \u0026#39;http://schema.org/UsedCondition\u0026#39;;\n}\n\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch3\u003eEnabling API Platform bundle support\u003c/h3\u003e\n\n\u003cp\u003ePHP Schema supports \u003ca href=\"../api-bundle/external-vocabularies.jsonld\"\u003eIRI annotations provided by DunglasApiBundle\u003c/a\u003e.\nThis is useful if you plan to use your generated data model to power a REST API.\u003c/p\u003e\n\n\u003cp\u003eTo enable this generator along with others, add the following lines to your PHP Schema configuration file:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eannotationGenerators:\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\PhpDocAnnotationGenerator\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\DoctrineOrmAnnotationGenerator\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\ConstraintAnnotationGenerator\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\DunglasApiAnnotationGenerator\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch3\u003eGoing further\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eBrowse \u003ca href=\"configuration.jsonld\"\u003ethe configuration documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSee \u003ccode\u003etests/config/ecommerce.yml\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eCardinality extraction\u003c/h2\u003e\n\n\u003cp\u003eThe Cardinality Extractor is a standalone tool (also used internally by the generator) extracting a property’s cardinality.\nIt uses \u003ca href=\"http://www.heppnetz.de/projects/goodrelations/\"\u003eGoodRelations\u003c/a\u003e data when available. Other cardinalities are\nguessed using the property’s comment.\nWhen cardinality cannot be automatically extracted, it’s value is set to \u003ccode\u003eunknown\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eUsage:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ebin/schema extract-cardinalities\n\u003c/code\u003e\u003c/pre\u003e\n","author":[{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Stepan Anchugov","email":"kixxx1@gmail.com"},{"@type":"Person","Name":"meyerbaptiste","email":"baptiste@les-tilleuls.coop"}],"dateCreated":"2015-09-04T12:59:28+02:00","dateModified":"2016-03-03T23:05:00+01:00"}